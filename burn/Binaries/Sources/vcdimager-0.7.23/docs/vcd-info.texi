\input texinfo @c -*-texinfo-*-

@paragraphindent 2
@exampleindent 0

@c %**start of header
@setfilename vcd-info.info
@set program @kbd{vcd-info}
@c A simple macro for optional variables.
@macro ovar{varname}
@r{[}@var{\varname\}@r{]}
@end macro

@settitle The GNU VCD Info Program (@value{program})
@setchapternewpage on
@c %**end of header

@include version-vcd-info.texi
@ifinfo
This file documents GNU VCD Info Program (@value{program})

Copyright (C) Rocky Bernstein @email{<rocky@@panix.com>}

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.1 or
any later version published by the Free Software Foundation; with the
Invariant Sections being ``Free Software'' and ``Free Software Needs
Free Documentation'', with the Front-Cover Texts being ``A GNU Manual,''
and with the Back-Cover Texts as in (a) below.

(a) The Free Software Foundation's Back-Cover Text is: ``You have
freedom to copy and modify this GNU Manual, like GNU software.  Copies
published by the Free Software Foundation raise funds for GNU
development.''
@end ifinfo

@titlepage
@title GNU Video CD Info Program (@value{program})
@subtitle $Id: vcd-info.texi,v 1.10 2005/02/13 19:59:44 rocky Exp $
@subtitle The GNU Video CD Authoring Tools.
@subtitle for version @value{VERSION}, @value{UPDATED}
@author Rocky Bernstein et al.
@page

@vskip 0pt plus 1filll

Copyright @copyright{} 2003, 2004, 2005 Rocky Bernstein @email{<rocky@@panix.com>}
@sp 1
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.1 or
any later version published by the Free Software Foundation; with the
Invariant Sections being ``Free Software'' and ``Free Software Needs
Free Documentation'', with the Front-Cover Texts being ``A GNU Manual,''
and with the Back-Cover Texts as in (a) below.

(a) The Free Software Foundation's Back-Cover Text is: ``You have
freedom to copy and modify this GNU Manual, like GNU software.  Copies
published by the Free Software Foundation raise funds for GNU
development.''
@end titlepage
@page

@ifnottex
@dircategory Video CD Tools
@direntry
* vcd-info: (vcd-info).                           Video CD Information tool
@end direntry

@node Top, Introduction, (dir), (dir)

@top The GNU Video CD Information Tool (@value{program})

This file documents GNU Video CD Information Tool.

Copyright (C) 2003, 2004, 2005 Rocky Bernstein

@menu
* Introduction::                What is the program and why would I use it? 
* Command Options::             How do I get this to do anything? 
* Output Sections::             How do interpret the output? 
* Some Examples::               Okay, enough talk. How about some simple examples?
* History and Thanks::          History and Acknowledgments

Indexes
* General Index::               Overall index
* Option Index::                Index for options
* Sub-Option Index::            Index for sub-options

@detailmenu
 --- The Detailed Node Listing ---

Command Options

* Where Options::               Options controlling where to read from 
* What Options::                Options controlling what do you want shown
* All Options::                 A complete list of options

Options controlling where to read from 

* CD Images::                   Reading from a file containing a CD disk image
* CD-ROM Device::               Reading from a CD-ROM device
* Intelligent Input::           Reading from wherever

Output Sections

* PVD::                         Primary Volume Descriptor (PVD) Section
* Filesystem::                  ISO 9660 Information
* Entries::                     Entries Section
* Info::                        Disc Information
* LOT::                         LID Offset Table (LOT) Section
* PSD::                         Program Segment Descriptors (PSD) Section
* Tracks::                      Tracks 

@end detailmenu
@end menu

@end ifnottex

@contents

@node Introduction, Command Options, Top, Top
@chapter Introduction

Note in the guide, we use the term Video CD to mean some sort of Video
Compact Disc. There are various formats of Video Compact Discs, the
oldest format of which is called ``VCD'' and is followed by a version
number: 1.0, 1.1 or 2.0. Hopefully it should also be clear by context
whether we are referring to a class of Video Compact Discs or the
specific older format called VCD @emph{version-number}.

@value{program}'s mission in life is to display the contents of a
Video CD or CD image. Well, that's not actually true---if given an
audio CD (CD-DA) or some other kind of CD, @value{program} will try to
display some information about that, perhaps just a list of the
tracks, with varying degrees of success; However Video CDs are what
@value{program} understands best and it will you the most detail
about.  The disk ``image'' does not have to reside on a physical
Compact Disc; @value{program} understand the BIN/CUE disk-image format
used by a popular DOS/Window mastering tool.

You might use the information from @value{program} as a diagnostic or
analytical tool. It may help you understand a particular Video CD that
you have. Or it might be useful in conjunction with or in debugging a
Video CD you are creating (``authoring''). But debugging is probably
best left for another tool; @value{program} will only let you display
information, you can't modify anything with this tool and it is not
interactive.

Although I imagine most of the time this is how you will use
@value{program}, there are some subsidiary uses.

@value{program} shows information about a Video CD and as such the
information shown reflects, sort of, the way the information is
stored. So in a sense @value{program} can teach you a little bit about
how a Video CD is laid out.

In writing an Video CD input plugin for a media player, I wanted to
get bits of information about the Video CD to display in the media
player, such as the Video CD format used and the volume name. Before
writing a C library for such purposes, a lower-tech, and more
loosely-coupled way to do this was used. The program ran
@value{program} with the specific information request and parsed the
text output. For example, to get just the format that the Video CD on
the``default'' CD-ROM device is in you might run:

@smallexample
  vcd-info --no-banner --show-format
@end smallexample 

To get the album information you might run:

@smallexample
  vcd-info --no-banner --show-info album
@end smallexample 

After doing this for a while and seeing this was useful, I then wrote
a Video CD ``info'' library. A library is much faster and furthermore
much of the information is saved away in memory reducing the amount of
disk I/O. Later it turned out that I could completely remove the
CD-reading routines from the VCD module and get this from another
library, but that's a different story. What's relevant is that after
creating this library, I then modified @value{program} to use this
library @kbd{libvcdinfo}. The @value{program} code then got shorter as
some of it getting moved inside the library. And this program served
as a test bed for the @kbd{libvcdinfo}.

So the last thing that @value{program} may be of useful for is if you
want to see how to use the @kbd{libvcdinfo} library; you can consult the
source program and see how @value{program} gets its information.

@node Command Options, Output Sections, Introduction, Top
@chapter Command Options

There are a number of miscellaneous options, but there are two broad
categories of options. There is a set of options for specifying what
to dump, these all start @kbd{--show-} and another set of options
which specify where the CD-ROM or CD-ROM disk-image is.

@menu
* Where Options::               Options controlling where to read from 
* What Options::                Options controlling what do you want shown
* All Options::                 A complete list of options
@end menu

@node Where Options, What Options, Command Options, Command Options
@section Options controlling where to read from 

If you don't specify any place to read from @value{program} will try
to read from the default device that may be appropriate for your OS.

There are two broad categories of input, reading from a device that
contains a Compact Disc, and reading from a file on the filesystem
that contains an image that could be burned into a Compact Disc.  The
option for the former category, reading a physical CD, is
@kbd{--cdrom-device} (@kbd{-C}); options for the latter category,
reading a file containing a CD disk image, are @kbd{--bin-file}
(@kbd{-b}), @kbd{--cue-file} (@kbd{-c}), @kbd{--toc-file}, and
@kbd{--nrg-file} (@kbd{-N}). There is one other option @kbd{--input}
(@kbd{-i}) which blurs the distinction---it tries to figure out based
on the name whether you are reading from a device containing a CD or
not and do the appropriate thing.  Of course, since it only makes
sense to read from one place, these options are mutually exclusive;
use only one option from this set.

@menu
* CD Images::                   Reading from a file containing a CD disk image
* CD-ROM Device::               Reading from a CD-ROM device
* Intelligent Input::           Reading from wherever
@end menu

@node CD Images, CD-ROM Device, Where Options, Where Options
@subsection Reading from a file containing a CD disk image
@cindex Reading, BIN, CUE, NRG or TOC CD-ROM disk image

The option @kbd{--bin-file}, @kbd{--cue-file} or @kbd{--toc-file} (the
short forms for the first two are these are @kbd{-b} and @kbd{-c}
respectively) indicate to read from a file containing an image what
might be burned onto Compact Disc. The format is expected to be in the
BIN/CUE format is is accepted by many CD mastering tools.

If you use the @kbd{--bin-file} option, the file read is expected to
be the ``.BIN'' part---this is the bulk of the data.  If you use
@kbd{--cue-file} the file read is a ``cue sheet'' a funny sort of CD
mastering file. The corresponding BIN file (which again contains the
bulk of the data) is not taken from the FILE statement inside the CUE
file, but it is constructed from the CUE file name by replacing ".cue"
by ".bin".  The CUE file must have exactly one FILE statement.

If you do not specify a file name after @kbd{--bin-file}, a default
name is used ``videocd.bin'' is probably used; likewise if you do not
specify a filename after --cue-file a default name is used, probably
``videocd.cue.'' These names I believe are the default output file
names used when you use @command{vcdimager} or @command{vcdxbuild}.

If you use the @kbd{--toc-file} option, the file read is expected to
be a CD-ROM disk image using for the format @kbd{cdrdao} uses.  

If you use the @kbd{--nrg-file} option (short form @kbd{-N}), the file
read is expected to be a CD-ROM disk image using a proprietary and
unpublished format used by the Nero burning software. Because this is
proprietary and not published, this code has been reverse engineered
and we really can't do as good a job as we can with a cue-sheet file.
It's better not to work with such things when possible.

@node CD-ROM Device, Intelligent Input, CD Images, Where Options
@subsection Reading from CD-ROM Device
@cindex Reading, CD-ROM Device

The option @kbd{--cdrom-device} or the short form @kbd{-C} is used
when you want to read from a Compact Disc. The name given would be the
device name. If you don't specify a device, a default will be selected
based on the Operating System or information that can be gleaned from
the OS. For example on GNU/Linux, the default device may be
@kbd{/dev/cdrom}, while on Solaris it might be
@kbd{/vol/dev/aliases/cdrom0}.

@node Intelligent Input,  , CD-ROM Device, Where Options
@subsection Reading from wherever
@cindex Reading, wherever

The option @kbd{--input} or the short form of this @kbd{-i} tries to
be intelligent by trying to figure out whether the thing you are
referring to is a device or a bin/cue disk image of a CD.

Currently the algorithm it uses the one that the provided by from the
underlying library: @kbd{libcdio}.  It is pretty simple: if the thing
referred to is what in Unix is called a ``block'' or ``character''
device (and there is such a notion in your OS), then it assumes a
device name. When you do ``long listing'' (``ls -l'') of the name and
track down possible symbolic links you will see a ``b'' or ``c'' in
the first column if the file is a block or character devices.

If the thing referred to in an @kbd{--input} option is a ``regular''
file then it is assumed you have a file image of a CD. If the filename
ends (i.e. the extension is) ``.bin'' or ``.BIN'' then we assume a
``BIN file'' if the filename ends ``.nrg or ``.NRG we assume a Nero
NRG disk image, and if the filename ends ``.toc'' or ``.TOC'' then we
assume a @kbd{cdrdao} CD image.

Although this algorithm is subject to change and there may be more
sophisticated or alternative methods, in practice I think this does
pretty much what's expected.

@node What Options, All Options, Where Options, Command Options
@section Options controlling what do you want shown

@value{program} is pretty flexible about the information it can show
you.

By default @value{program} will show just about everything it can
about a Video CD image. There is additional information you can get using
the option @kbd{--debug}, but this is of a debugging nature. 

However if you specify something in particular to dump, for example to
dump track information via command option @kbd{--show-tracks},
@value{program} switches behavior and shows you almost nothing except
what you asked for. I wrote ``almost nothing except'' rather than
``nothing except'' because by default there still is a little bit of
extra information that is shown: delimiters between requested sections
and a banner. However there are options to turn these off too. You
don't have to ask for just one section or one item of a section at a
time, you can list many individual items or sections together.

Most of the individual items that can be shown are part of a larger
group listed in @ref{Output Sections, ,Output Sections}. For example to
show the volume id of the Video CD image which resides in the PVD
sections of output you would use the option @kbd{--show-pvd vol}.

@cindex suboptions
To show everything in one of these large sections you give the section
name followed by ``-all.'' So to see the entire PVD section you would
use the command option @kbd{--show-pvd-all}.

To see a list of the suboptions available use the sub-option ``help'';
for example to see the sub-options available for the PVD section, you
would use the command option @kbd{--show-pvd help}.

@node All Options,  , What Options, Command Options
@section A complete list of options

First some general-purpose options. These you might find on other
programs.

@table @code
@item --help
@kindex @code{--help}
This option give a list of options type @kbd{--help}. @kbd{-?} is an
abbreviation however you will probably have to ``escape'' the question
mark so that the shell doesn't interpret this; i.e. you may have to
type @kbd{-\?}.

@item --usage
@kindex @code{--usage}
This option shows an abbreviated usage message

@item --debug @var{debug level}
@itemx -d @var{debug level}
@kindex @code{--debug}
This option gives more verbose, debugging output. The higher the
number given, the more the output. A value of 3 or greater includes
library informative messages and a value of 4 or greater includes
library debugging messages.

@item --terse
@itemx -t
@kindex @code{--terse}
This option is the same as giving the combined options
@kbd{--no-header --no-banner --no-delimiter}.  This option can be
useful if this program is getting called for information from another
program and you don't want to have filter this information out.

@item --quiet
@itemx -q
@kindex @code{--quiet}
Show only critical messages

@item --version
@itemx -V
@kindex @code{--version}
Display version and copyright information (the stuff that is
suppressed by @kbd{--no-banner} and exit after displaying this
information. Sometimes, you just wanna know what version you got.
@end table

Next we have some miscellaneous options that don't fall into another
particular category. 

@table @code
@item --access-mode
@kindex @code{--access-mode}
This option probably makes sense only if you are reading from a
CD-ROM.  This overrides the default way that we read from the
CD-ROM. The possible values allowed depend on the CD-ROM driver. Some
values which work on some drivers are ``IOCTL'', ``READ_10,'' and
``READ_CD.''

@item --no-banner
@itemx -B
@kindex @code{--banner}
Do not show program banner header and CVS Id line. This would be
useful in a regression test program where you want to check the output
but know that the version information is going to change over time.

@item --no-delimiter
@itemx -D
@kindex @code{--no-delimiter}
Do not show delimiter lines around various the sections of @ref{Output
Sections, ,Output Sections}.

@item --sector-2336
@kindex @code{--sector-2336}
This option only makes sense if you are reading from a BIN CD disk
image.  This indicates to @value{program} to assume a 2336-byte sector
mode for image file. @emph{Note: This option is slated to disappear.}
@end table

Use at most one option in an invocation from the following list. These
options are described in general in @ref{Where Options, ,Options
controlling where to read from}.

@table @code
@item --bin-file @ovar{filename}
@itemx -b @ovar{filename}
@kindex @code{--bin-file}
Specifies a BIN CD-ROM disk image to read from. See @ref{CD Images, ,Reading from a file containing a CD disk image}.


@item --cdrom-device @ovar{device-name}
@itemx -C @ovar{device-name}
@kindex @code{--cdrom-device}
Specifies a CD-ROM device to read from. See @ref{CD-ROM
Device, ,Reading from CD-ROM Device}.

@item --cue-file @ovar{filename}
@itemx -c @ovar{filename}
@kindex @code{--cue-file}
Specifies a CUE file to read from. Preferred over a BIN file if
available. See @ref{CD Images, ,Reading from a file containing a CD disk image}.

@item --nrg-file @ovar{filename}
@itemx -N @ovar{filename}
@kindex @code{--nrg-file}
Specifies a Nero NRG-format CD-ROM disk image to read from. See
@ref{CD Images, ,Reading from a file containing a CD disc image}.

@item --input @ovar{file or device name}
@itemx -i @ovar{file or device name}
@kindex @code{--input}
This option is insensitive to whether the thing reading from is a
CD-ROM device or a file. See @ref{Intelligent Input, ,Reading from
wherever}.

@end table

The options below control how much output you get and described in
general in @ref{Output Sections, ,Output Sections}.

@table @code
@item --no-ext-psd
@kindex @code{--no-ext-psd}
If the Video CD is in format VCD 2.0, there can be an optional
``extended'' PSD which contains information in the PSD and area
highlighting and selection information. To suppress reading and
printing this information use this option. The option is only
meaningful if the VCD format is 2.0.

@item --show-entries-all
@itemx -E
@kindex @code{--show-entries-all}
List everything in the Entries section. See @ref{Entries, ,Entries Section}.

@item --show-entries @var{sub-option}
@kindex @code{--show-entries}

Sub-options are: ``count'', ``data'', ``id'', ``prof'', or ``vers''.

@ftable @code
@item count
The number of entries. A number. See line 5 of the example in
@ref{Entries, ,Entries Section}.
@item data
A complete list of the entries. See lines 6--9. of the example in
@ref{Entries, ,Entries Section}.
@item id
An 8 characters name, probably ``ENTRYVCD''. The name may also be
``ENTRYSVD'' but this is deprecated. Some DVD players may require one
or the other to play SVCDs. See line 2 of the example in @ref{Entries,
,Entries Section}. The XML tag for this is <option name="svcd vcd30
entrysvd" value="true"/> or <option name="svcd vcd30 mpegav"
value="true"/> or the tag can be left out in which case you'll get
ENTRYVCD.
@item prof
System profile tag. See line 4 of the example in @ref{Entries, ,Entries
Section}. If the format is HQSVCD the value will be 1. If the format
is SVCD the value will be 0.
@item vers
A 2-hex digit version number. See line 3 of the example in
@ref{Entries, ,Entries Section}.
@end ftable

@item --show-filesystem
@itemx -F 
@kindex @code{--show-filesystem}
List everything in the filesystem section.  For information about what is in
this section,  see @ref{Filesystem, ,ISO-9660 section}.

@item --show-format
@itemx -f 
@kindex @code{--show-format}
Show the format that the Video CD is in. The value will be one of ``VCD
1.1'', ``VCD 2.0'', ``SVCD'', or ``HQVCD''. Note that @value{program}
does not validate that the CD image conforms rigorously to any set
of standards. However this does suggest what it might most closely
conform to.

@item --show-info-all
@kindex @code{--show-info-all}
List everything in the Info section. See @ref{Info, ,Disc Information}.

@item --show-info @var{suboption}
@itemx -I @ovar{sub-option}
@kindex @code{--show-info}

Sub-options are: album, cc, count, id, ofm, lid2, lidn, pal, pbc,
prof, psds, res, seg, segn, segs, spec, start, st2, vers, or vol.

@ftable @code
@item album
A description of the album; it could be an album id. The XML tag for
this is <album-id>. It is a fixed-length blank-padded string of 16
characters. See line 5 of the example in @ref{Info, ,Disc Information}.
@item cc
user data cc. See line 14 of the example in @ref{Info, ,Disc Information}.
@item count
The number of disks in the volume, an integer. The XML tag for this is
<volume-count>. See line 6 of the example in @ref{Info, ,Disc Information}.
@item id
A string representing the Video CD format. ``VIDEO_CD'' for VCD 1.0, VCD
1.1, or VCD 2.0, ``SUPERVCD'' for SVCD, XVCD, CVD, and ``HQ-VCD'' for
HQVCD. A Maximum of 8 characters. See line 2 of the example in
@ref{Info, ,Disc Information}.
@item ofm
offset multiplier. Value is given is in hexadecimal. See line 20 of
the example in @ref{Info, ,Disc Information}.
@item lid2
start lid #2. A boolean value. The XML tag for this is
<next-volume-use-lid2>. See line 15 of the example in @ref{Info, ,Info
Section}.
@item lidn
Maximum LID number. See line 21 of the example in @ref{Info, ,Info
Section}.
@item pal
bit set of 98 PAL(=set)/NTSC flags. See lines 8--9 of the example in
@ref{Info, ,Disc Information}.
@item pbc
Show the field called ``extended pbc'' or ``reserved2'' A boolean
value. If the image format is SVCD or HQVCD, this will be labeled
``reserved2'' rather than ``extended pbc.'' Furthermore if the format
is VCD 2.0, checks for for extended playback control files
(EXT/LOT_X.VCD and EXT_PSD_X.VCD) will be made. If both files exist
then VCD2.0 extended playback is probably used.  See line 17 of
@ref{Info, ,Disc Information}.
@item prof
System profile tag.  Used to define the set of mandatory parts to be
applied for compatibility. Tag, 0x00 for "SUPERVCD", 0x01 for
"HQ-VCD", 0x0@emph{n} for VCD@emph{x}.@emph{n}. A hexadecimal number.
See line 4 of the example in @ref{Info, ,Disc Information}.
@item psds
PSD size. See line 18 of the example in @ref{Info, ,Disc Information}.
@item res 
Restriction number, e.g. ``unsuitable for kids''; 0 is unrestricted,
1 is restricted category 1, 2 is restricted category 2, 3 is
restricted category 3. The XML tag for this is <restriction>.
@item seg
First segment MSF address. See line 19 of the example in
@ref{Info, ,Disc Information}.
@item segn
Max segment number. See line 22 of the example in @ref{Info, ,Disc Information}.
@item segs
The name of file containing segment information. VCD/INFO.VCD or
SVCD/INFO.SVD. See line 1 of the example in @ref{Info, ,Disc Information}.
@item spec
Special info is encoded into the pictures. A boolean value. See line
13 of the example in @ref{Info, ,Disc Information}.
@item start
start time offset. Only relevant if SVCD or HQVCD. The XML tag for
this is <start-time-offset>. 
@item st2
start track #2. A boolean value. The XML tag for this is
<next-volume-use-sequence2>. See line 16 of the example in
@ref{Info, ,Disc Information}.
@item vers
0x01 for SVCD and VCD1.@emph{x}; 0x02 -- VCD2.0. A hexadecimal number.
See line 3 of the example in @ref{Info, ,Disc Information}.
@item vol
The volume number. The XML tag for this is <volume-number>. See line 7
of the example in @ref{Info, ,Disc Information}.
@end ftable

@item --show-lot
@itemx -L
@kindex @code{--show-lot}

List everything in the LOT section. See @ref{LOT, ,LID Offset Table
(LOT) Section) Section}.

@item --show-psd
@itemx -p
@kindex @code{--show-psd}

List everything in the PSD section. See @ref{PSD, ,Program Segment
Descriptors (PSD) Section}.

@item --show-pvd-all
@kindex @code{--show-pvd-all}
List everything in the PVD section. For an example of this section and
some additional information, see the listing @ref{PVD, ,Primary
Volume Descriptor (PVD) Section}. 

@item --show-pvd @var{suboption}
@itemx -P @ovar{sub-option}
@kindex @code{--show-pvd}

Sub-options are: app, id, iso, prep, pub, sys, vers, vol,
volset, or xa.

@ftable @code
@item app
The application id; a string of at most 128 characters and often
indicates the program used to create the CD. The XML tag for this is
<application-id>. See line 9 of the example in @ref{PVD, ,Primary
Volume Descriptor (PVD) Section}.
@item id
Some sort of string ID. See line 2 of the example in @ref{PVD, ,Primary Volume
Descriptor (PVD) Section}.
@item iso
ISO size in blocks. See line 10 of the example in @ref{PVD, ,Primary
Volume Descriptor (PVD) Section}.
@item prep
preparer id; a string of at most 128 characters. The XML tag for this
is <preparer-id>. See line 7 of the example in @ref{PVD, ,Primary
Volume Descriptor (PVD) Section}.
@item pub
publisher id. The XML tag for this is <publisher-id>. See line 7 of
the example in @ref{PVD, ,Primary Volume Descriptor (PVD) Section}.
@item sys
The system ID; a string of at most 32 characters. The XML tag for this
is <system-id>. See line 4 of the example in @ref{PVD, ,Primary Volume
Descriptor (PVD) Section}.
@item vers
The version ID. A decimal number. See line 3 of the example in
@ref{PVD, ,Primary Volume Descriptor (PVD) Section}.
@item vol
The volume ID. The XML tag for this is <volume-id>. See line 5 of the
example in @ref{PVD, ,Primary Volume Descriptor (PVD) Section}.
@item volset
Volume set id. See line 5 of the example in @ref{PVD, ,Primary Volume
Descriptor (PVD) Section}.
@item xa
A boolean indicating whether the XA marker is present or not. See line
11 of the example in @ref{PVD, ,Primary Volume Descriptor (PVD)
Section}.
@end ftable

@item --show-scandata
This option is relevant only if the program streams are MPEG2's. That is
the Video CD image is not VCD 1.0, VCD 1.1 VCD 2.0. 

@itemx -s
@kindex @code{--show-scandata}

@item --show-search
@itemx -X
@kindex @code{--show-search}
This option is relevant only if the program streams are MPEG2's. That is
the VCD image is not VCD 1.0, VCD 1.1 VCD 2.0. 

@item --show-source
@itemx -S
@kindex @code{--show-source}

Just list out where you are reading from and the size of the image.

Here's an example of the output of this: 

@smallexample
Source: image file `/src/dvdrip/dumbo/dumbo.cue'
Image size: 275792 sectors
@end smallexample

@item --show-tracks
@itemx -T
@kindex @code{--show-tracks}

List everything in the Tracks section. See @ref{Tracks, ,Tracks Section}.

@end table

@node Output Sections, Some Examples, Command Options, Top
@chapter Output Sections

When you run @value{program} to display the contents of an entire disk,
unless you use the option @kbd{--no-delimiter} (@kbd{-D}) you'll notice large
sections of output separated by a string of dashes like this:

@smallexample
------------------------------------------------------------------------
@end smallexample 

These separate the major logical sections of a Video CD

@menu
* PVD::                         Primary Volume Descriptor (PVD) Section
* Filesystem::                  ISO 9660 Information
* Entries::                     Entries Section
* Info::                        Disc Information
* LOT::                         LID Offset Table (LOT) Section
* PSD::                         Program Segment Descriptors (PSD) Section
* Tracks::                      Tracks 
@end menu

Note that in example given in these sections, numbers at the beginning
of a line are line numbers and are not part of the actual output. We
use these to help refer to parts of the example.

@node PVD, Filesystem, Output Sections, Output Sections
@section Primary Volume Descriptor (PVD) Section
@cindex Primary Volume Descriptor (PVD) 

The first track of a Video CD is an ISO-9660 formatted track. As such
it contains information defined by the ISO 9660 specification. The
starting point for information from an ISO 9660 track is the PVD or
Primary Volume Descriptor found at sector 16. A PVD is sort of like a
``superblock'' for a filesystem.

Here is part of sample output from the test PAL SVCD that can be

found from:
@url{http://www.vcdimager.org/pub/vcdimager/examples/test_svcd/test_svcd_pal.zip}

@smallexample
 1. ISO9660 primary volume descriptor
 2.  ID: `CD001'
 3.  version: 1
 4.  system id: `CD-RTOS CD-BRIDGE'
 5.  volume id: `PAL_TEST_SVCD'
 6.  volumeset id: `'
 7.  publisher id: `Herbert Valerio Riedel'
 8.  preparer id: `GNU VCDIMAGER 0.7.10 LINUX-GNU/I386'
 9.  application id: `'
10. ISO size: 1426 blocks (logical blocksize: 2048 bytes)
11. XA marker present: yes
@end smallexample

@node Filesystem, Entries, PVD, Output Sections
@section ISO-9660 section

This section contains something that looks pretty much like a
directory listing obtained by interpreting the ISO-9660 filesystem
information. Here's a sample:

@smallexample
 /:
  d d---1xrxrxr 0 0 [fn 00] [LSN     18]      2048  .
  d d---1xrxrxr 0 0 [fn 00] [LSN     18]      2048  ..
  d d---1xrxrxr 0 0 [fn 00] [LSN     19]      2048  EXT
  d d---1xrxrxr 0 0 [fn 00] [LSN     20]      2048  MPEGAV
  d d---1xrxrxr 0 0 [fn 00] [LSN     21]      2048  VCD

 /EXT/:
  d d---1xrxrxr 0 0 [fn 00] [LSN     19]      2048  .
  d d---1xrxrxr 0 0 [fn 00] [LSN     18]      2048  ..
  - ----1xrxrxr 0 0 [fn 01] [LSN    225]     65536  LOT_X.VCD;1
  - ----1xrxrxr 0 0 [fn 01] [LSN    257]      6800  PSD_X.VCD;1

 /MPEGAV/:
  d d---1xrxrxr 0 0 [fn 00] [LSN     20]      2048  .
  d d---1xrxrxr 0 0 [fn 00] [LSN     18]      2048  ..
  - ---2-xrxrxr 0 0 [fn 01] [LSN    450] 639546208 (563593216)  AVSEQ01.DAT;1

 /VCD/:
  d d---1xrxrxr 0 0 [fn 00] [LSN     21]      2048  .
  d d---1xrxrxr 0 0 [fn 00] [LSN     18]      2048  ..
  - ----1xrxrxr 0 0 [fn 00] [LSN    151]      2048  ENTRIES.VCD;1
  - ----1xrxrxr 0 0 [fn 00] [LSN    150]      2048  INFO.VCD;1
  - ----1xrxrxr 0 0 [fn 00] [LSN    152]     65536  LOT.VCD;1
  - ----1xrxrxr 0 0 [fn 00] [LSN    184]      2456  PSD.VCD;1
@end smallexample

Note that all the filenames seem to end with @kbd{;1}. This is a
``version'' number of the file. ISO-9660 filename translation as might
be found if the filesystem were mounted is not performed here; if it
were, this would be stripped and probably the filenames would be in
lowercase letters.

The ``attribute'' characters at the beginning of left-hand side of the
listing, for the most part, looks like what you would get in a Unix
listing. Except there are these 1's and 2's before what in Unix would
be the user/group/other mode attributes.  Those numbers indicate
whether the track is ``mode2 form1'' or ``mode2 form2.'' So the
example above, AVSEQ01.DAT is in a mode2 form2 track while every other
entry listed is in a mode2 form1 track.  The movie part is is this
mode2 form2 track while the remaining meta-data part is in a mode2
form1 track.

Another unusual thing about that single mode2 form2 track containing
AVSEQ01.DAT, is that there seem to be two numbers listed before the
AVSEQ01.DAT entry. All the other mode2 form1 entries have a single
number listed beforehand. The first number (63954208) is the number of
bytes that is occupied on the disk proper. The second number in
parenthesis (563593216) is the number of bytes if you assumed the file
had 2048-byte blocks rather than the 2334-byte mode2 format2
blocksize. If you were to mount the CD filesystem you might see the
second smaller number in a listing there.

The exact meaning of the attributes section is listed below:

@itemize @bullet
@item
The 1st character is either "d" if the entry is a directory, or "-" if
not.
@item
The 2nd character is either "a" if the entry is CD-DA (audio), or "-"
if not.
@item
The 3rd character is either "i" if the entry is interleaved, or "-" if
not.
@item
The 4th character is either "2" if the entry is mode2 form2 or "-" if
not.
@item
The 5th character is either "1" if the entry is mode2 form1 or "-" if
not.Note that an entry will either be in mode2 form1 or mode form2. That
is you will either see "2-" or "-1" in the 4th & 5th positions.
@item
The 6th and 7th characters refer to permissions for everyone while the
@item
the 8th and 9th characters refer to permissions for a group while, and
@item
the 10th and 11th characters refer to permissions for a user.
@end itemize
 
In each of these pairs the first character (6, 8, 10) is "x" if the
entry is executable. For a directory this means the directory is
allowed to be listed or "searched".  The second character of a pair
(7, 9, 11) is "r" if the entry is allowed to be read.

The item in brackets, e.g. @kbd{[LSN 450]} for the AVSEQ01.DAT entry
is the ``logical sector number'' or the place on the CD where the
entry starts.

@node Entries, Info, Filesystem, Output Sections
@section Entries Section

Here is part of sample output from the Video CD used above.

@smallexample
 1. VCD/ENTRIES.VCD
 2. ID: `ENTRYVCD'
 3. version: 0x02
 4. system profile tag: 0x00
 5. entries: 31
 6. ENTRY[00]: track# 1 (SEQUENCE[0]), LSN 450 (MSF 00:08:00)
 7. ENTRY[01]: track# 1 (SEQUENCE[0]), LSN 482 (MSF 00:08:32)
 8. ENTRY[02]: track# 1 (SEQUENCE[0]), LSN 5888 (MSF 01:20:38)
 9. ENTRY[03]: track# 1 (SEQUENCE[0]), LSN 8925 (MSF 02:01:00)
 ...
@end smallexample

In the above example, in the first line corresponds the ``filename''
in the files section that starts at logical sector number 151. If this
Video CD were in SVCD, XVCD, HQVCD or CVD format that line would
probably say ``SVCD/ENTRIES.SVD.'' As shown In line 5, I made 31
entries for the Video CD; only the first 4 are shown. Depending on how
playback control is set up you should be able to randomly access up to
31 different playback locations on this Video CD. If you use a media
player like xine and my plugin for it, there is a way jump to the
beginning of each of these entries.

The ``track #'' and SEQUENCE number are about the same thing, the
track being one more than the SEQUENCE number. Note on line 6 ENTRY[00] is
also at logical sector number 450, the same as AVSEQ01.DAT. In other
words ``Entry 0'' is the start of the movie.

The minutes, seconds, frames number (MSF 00:08:00) is equivalent to
the LSN number. For those who wonder how to from the MSF to the LSN
you basically multiply the seconds (8) by 75 since there are 75 frames
in a second (note this has nothing to do with how fast this is
displayed). If you get this you get 600 which is a bit large. But
that's because the MSF number 00:00:00 is equal to 150 or the ``pregap
sector size.''


@node Info, LOT, Entries, Output Sections
@section Disc Information

Here is part of sample output from a SVCD. (This is not the same
example as the Video CD used before.)

@smallexample
 1. SVCD/INFO.SVD
 2. ID: `SUPERVCD'
 3. version: 0x01
 4. system profile tag: 0x00
 5. album id: `                '
 6. volume count: 3
 7. volume number: 2
 8. pal flags: 00000000 00000000 00000000 00000000 00000000 00000000
 9.  (bslbf)   00000000 00000000 00000000 00000000 00000000 00000000 00
10. flags:
11.  reserved1: no
12.  restriction: 0
13.  special info: no
14.  user data cc: no
15.  start lid #2: no
16.  start track #2: no
17.  reserved2: no
18. psd size: 2376
19. first segment addr: 00:05:00
20. offset multiplier: 0x08
21. maximum lid: 15
22. maximum segment number: 3
23. SEGMENT[1]: audio: no stream, video: NTSC still, continuation no, OGT substream: None
24. SEGMENT[2]: audio: no stream, video: NTSC still, continuation no, OGT substream: None
25. SEGMENT[3]: audio: no stream, video: NTSC still, continuation no, OGT substream: None
26. volume start time[0]: 0 secs
27. volume start time[1]: 0 secs
28. volume start time[2]: 0 secs
29. volume start time[3]: 0 secs
30. volume start time[4]: 0 secs
@end smallexample

@node LOT, PSD, Info, Output Sections
@section LID Offset Table (LOT) Section

Here is part of sample output from a SVCD of this section.

@smallexample
SVCD/LOT.SVD
 LID[1]: offset = 0 (0x0000)
 LID[2]: offset = 216 (0x001b)
 LID[3]: rejected
@end smallexample

We have list id's (LIDs). The offset are offsets into the Program
Segment descriptors described in @ref{PSD, Program Segment Descriptors
(PSD) Section}. LID 3 is rejected which means that you are not
supposed to be able to jump to that entry directly but may reach it
through program control.


@node PSD, Tracks, LOT, Output Sections
@section Program Segment Descriptors (PSD) Section
@cindex Program Segment Descriptors (PSD) 

Here is part of sample output from the test PAL SVCD that can be found
from:
@url{http://www.vcdimager.org/pub/vcdimager/examples/test_svcd/test_svcd_pal.zip}

@smallexample
SVCD/PSD.SVD
 PSD[00] (LID[1] @@0x0000): play list descriptor
  NOI: 2 | LID#: 1 (rejected: no)
  prev: disabled | next: LID[2] @@0x0003 | return: disabled
  playtime: 0/15s | wait: 0s | autowait: 0s
  play-item[0]: SEGMENT[8] (0x03ef)
  play-item[1]: SEGMENT[7] (0x03ee)
@end smallexample

The first line SVCD/PSD.SVD again is the file entry that we are
reading. Since the CD image is in the SVCD format have that particular
name. If the CD image were in VCD 1.1 or VCD 2.0 format the line would
read VCD/PSD.VCD.

Above NOI shows that there are two play-item entries, the individual
entries are given below. We also see that this item is not
``rejected'' and thus could be accessed directly from a player.

The corresponding XML text for the above output is:

@smallexample
  <playlist id="playlist-01">
    <next ref="playlist-02"/>
    <wait>0</wait>
    <autowait>0</autowait>
    <play-item ref="segment-0007"/>
    <play-item ref="segment-0006"/>
  </playlist>
@end smallexample

Some of the tag names like ``play-item,'' ``wait, and ``autowait''
given above match what are in the XML description. Although, you won't
find ``next,'' ``prev'' or ``return'' listed, the tag names are also
the same. In the XML you are free to omit values and you will get
default values put in; in @value{program} you see what has been filled
in.

Below is another excerpt from that file.

@smallexample
  PSD[03] (LID[4] @@0x0007): selection list descriptor
  Flags: 0x01 | NOS: 9 | BSN: 1 | LID: 4 (rejected: yes)
  prev: disabled | next: disabled | return: disabled
  default: LID[12] @@0x0029 | timeout: LID[2] @@0x0003
  wait: 10 secs | loop: 1 (delayed: no)
  play-item: SEGMENT[1] (0x03e8)
  ofs[0]: LID[6] @@0x0015
  ofs[1]: LID[7] @@0x0017
  ofs[2]: LID[8] @@0x0019
  ofs[3]: LID[9] @@0x001b
  ofs[4]: LID[11] @@0x0026
  ofs[5]: LID[10] @@0x001d
  ofs[6]: LID[13] @@0x002b
  ofs[7]: disabled
  ofs[8]: LID[14] @@0x002e
  prev_area: disabled | next_area: disabled
  retn_area: disabled | default_area: disabled
  area[0]: disabled
  area[1]: disabled
  area[2]: disabled
  area[3]: disabled
  area[4]: disabled
  area[5]: disabled
  area[6]: disabled
  area[7]: disabled
  area[8]: disabled
@end smallexample

The XML excerpt that corresponds to this part is this:

@smallexample
  <selection id="selection-01" rejected="true">
    <bsn>1</bsn>
    <default ref="playlist-10" x1="0" y1="0" x2="0" y2="0"/>
    <timeout ref="playlist-02"/>
    <wait>10</wait>
    <loop jump-timing="immediate">1</loop>
    <play-item ref="segment-0000"/>
    <select ref="playlist-05" x1="0" y1="0" x2="0" y2="0"/>
    <select ref="playlist-06" x1="0" y1="0" x2="0" y2="0"/>
    <select ref="playlist-07" x1="0" y1="0" x2="0" y2="0"/>
    <select ref="playlist-08" x1="0" y1="0" x2="0" y2="0"/>
    <select ref="playlist-09" x1="0" y1="0" x2="0" y2="0"/>
    <select ref="selection-02" x1="0" y1="0" x2="0" y2="0"/>
    <select ref="playlist-11" x1="0" y1="0" x2="0" y2="0"/>
    <select/>
    <select ref="playlist-12" x1="0" y1="0" x2="0" y2="0"/>
   </selection>
@end smallexample

@node Tracks,  , PSD, Output Sections
@section Tracks
@cindex Tracks

Here is part of sample output from the test PAL SVCD that can be found
from:
@url{http://www.vcdimager.org/pub/vcdimager/examples/test_svcd/test_svcd_pal.zip}

@smallexample
 1. SVCD/TRACKS.SVD
 2.  ID: `TRACKSVD'
 3.  version: 0x01
 4. tracks: 1
 5.  track[00]: 00:59:61, audio: 2 streams, video: PAL stream, OGT stream: 
     all available
 6. CVD interpretation (probably)
 7. (track[00]: 00:59:61 (cumulated), audio: 00, ogt: de)
 8. ------------------------------------------------------------------------
 9. CD-ROM TRACKS
10. tracks:  1
11. track # 01, LSN   1576, MSF: 00:23:01, size:   13386240
12. leadout   : LSN   7486, MSF: 01:41:61, size:          0
@end smallexample

Lines 1 and 2 you will see if the format is a SVCD, XVCD, or CVD.  If
the format is some sort of Video CD you will lines 1 and 2 will be:

@smallexample
VCD/INFO.VCD
 ID: `VIDEO_CD'
@end smallexample

There is one track on this SVCD with two audio streams (channel 0 is
in German and stream 1 is in English but the language information
can't be determined from information on the image). The video stream
on the single stream is in PAL format and there is a subtitle.
Actually the subtitle may be in one of at least two format, a format
defined by Philips called OGT (Overlay Graphics Text) as it is listed
above or it might be in another format used in CVD's.  

On line 6, the CVD interpretation is a bit of a guess, and lines 6--7
only appears if the Video CD image is not VCD 1.@emph{x} or VCD 2.0.
There are all sorts of ways to violate standards and @value{program}
doesn't do a rigorous job in determining if they have been
violated. So it doesn't really know if the CD image is a CVD or
not. Worse, we really don't have a firm grasp of what the CVD
specifications are.  Having written all this though, a guess is that
if the subtitle's a private stream id in the MPEG file has hexadecimal
number 0xde. This may be completely bogus though.

The bottom part of the display shows track info obtained in a
lower-level way. The information above CDROM TRACKS comes from
meta-data read in that IS09660 filesystem. 

If you are reading from a CD-ROM device, this information comes from
comes requests from the device to give track information. If what you
are reading is a disk image, the only way to get this information has
to come from a ``cue sheet'' which is why it is better to specify a
CUE file than a BIN file.

@node Some Examples, History and Thanks, Output Sections, Top
@chapter Some simple command invocations.

Perhaps all you want to do is dump the information about a CD that is
currently sitting in your CD-ROM drive. If the CD is in the
``default'' location for your OS, then this might work:

@smallexample
  vcd-info
@end smallexample 

It means the same thing as:
@smallexample
  vcd-info --cdrom-device
@end smallexample 

and using the ``short'' option:
@smallexample
  vcd-info -C
@end smallexample 

I have a combined CD-ROM and DVD drive called @kbd{/dev/dvd}. I have
another CD-ROM drive which goes under the name @kbd{/dev/cdrom}, but I
generally prefer to use the DVD/CD-ROM drive for reading since it
doesn't seem to run as hot. Since that drive is not the ``default''
(@kbd{/dev/cdrom}) on my GNU/Linux box, I have to give a location. So
this will work:

@smallexample
  vcd-info -C=/dev/dvd
@end smallexample 

Or even better, I'll let @value{program} figure out it's a CD-ROM device:
@smallexample
  vcd-info -i /dev/dvd
@end smallexample 
The equals sign before @kbd{/dev/dvd} is optional in either format.

Let's say you just used vcdimager or vcdxbuild it created output to
its ``default'' location (probably @kbd{videocd.cue} and
@kbd{videocd.bin}. To dump out this out:
@smallexample
  vcd-info --cue-file
@end smallexample 

But if you specified the output to go to say @kbd{nausicaa.bin} and
@kbd{nausicaa.cue} you would have to specify that location like this:
@smallexample
  vcd-info -c nausicaa.cue
@end smallexample 

Or again not having to worry about what type of file you could use 
the ``intelligent'' input option again as we did before:
@smallexample
  vcd-info -i nausicaa.cue
@end smallexample 

To list all of the sub-options to choose from in the Primary Volume
Descriptor section (PVD) try this:
@smallexample
  vcd-info --show-pvd help
@end smallexample 

Okay, now for for some more obscure stuff. Let's say I'm writing a
front-end GUI to do all sorts of stuff and I just need to pick out the
format (VCD 1.1, VCD 2.0, SVCD, CVD, XVCD, or HQVCD) of the Video CD
in the default drive. Since I have to read in this output, I don't
want any extra lines not relevant other than the version.

@smallexample
  vcd-info --no-banner --show-format
@end smallexample 

Or even shorter:
@smallexample
  vcd-info -t -f
@end smallexample 

I want to see the filesystem info and track info for the CD
in my default drive

@smallexample
  vcd-info --show-tracks --show-filesystem
@end smallexample 

I want to see the filesystem info and track info for the CD
in my default drive

And finally I want to see just the ``data'' part --- that is the list
of the entries section, no summary information like a count or ID tag.
@smallexample
  vcd-info --show-entries data
@end smallexample 

@node History and Thanks, General Index, Some Examples, Top
@chapter History and Thanks

This program started its life under the name ``vcddebug'' by Herbert
Valerio Riedel. The overall structure is still largely that of this
program. However @kbd{vcddebug} dumps all information about a Video CD
always.  I needed to pick out individual pieces of information from
this for a media player plugin. Initially I was running @kbd{vcddebug}
and parsing output. It became clear that it would be convenient to add
options to reduce the amount of output. Initially there were single
options added such as to show the VCD format. However with the bulk of
information that's that is available, a sub-option system became very
useful; that was added.

I was unhappy about the name ``vcddebug'' since there really was no
debugging involved. Furthermore getting changes back into @kbd{vcddebug} was
going a bit slowly. So @kbd{vcddump} (the original name of this
program) was started and that allowed me more freedom to change the
program in more drastic ways. In particular, it was becoming clear to
me that what I really needed was a library to give information about a
Video CD and much of this code was ``inlined'' inside
@kbd{vcddebug}. So I pulled pieces of that out and a library,
@kbd{libvcdinfo}, was created. As a result @value{program} became a
test-bed for this library.

In developing my VCD plugin, I used @value{program} quite a
bit. One of the annoying things about @kbd{vcddebug} was it's
verbosity in specifying where to read from; I was constantly typing
``--cdrom-device=/dev/cdrom'' when I felt that the program should be
able to figure this out. The distinction between a ``device'' and a
file containing CD image while it may be fascinating to the program,
was just not of interest to me as a user. So the ability to figure out
what seems to be a reasonable guess about what's being read, short
options for the classes of input and optional names were then added.

When my VCD input plugin got good enough to read CD-images from a
file, I realized that in order to recover track information one needs
to consult the CUE file. So the ability to read this kind of file was
added to the library routines, and @value{program} was adjusted
accordingly. Likewise dumping out track information when a image is
not a VCD was added. Later, I realized that CD information (and
control) was a beast of its own outside of @kbd{vcddump},
@kbd{libvcdinfo} or even @kbd{vcdimager}. So with Herbert Valerio
Riedel's blessing, @kbd{libcdio} and later @kbd{libiso9660} were
started by splitting off code from the @kbd{vcdimager} package.

In writing a utility programs to show off @kbd{libcdio}, I came across
Gerd Knorr's @kbd{cdinfo} and with his permission I modified it
calling @kbd{cd-info} (so both programs could be available
simultaneously). I then realized that if @kbd{vcddump} were renamed
@kbd{vcd-info} it might make a stronger uniform connection between
these two similar programs.

And the rest is history.

@node General Index, Option Index, History and Thanks, Top
@unnumbered General Index
@printindex cp

@node Option Index, Sub-Option Index, General Index, Top
@unnumbered Option Index
@printindex ky

@node Sub-Option Index,  , Option Index, Top
@unnumbered Sub-Option Index
@printindex fn

@tex
% I think something like @colophon should be in texinfo.  In the
% meantime:
\long\def\colophon{\hbox to0pt{}\vfill
\centerline{The body of this manual is set in}
\centerline{\fontname\tenrm,}
\centerline{with headings in {\bf\fontname\tenbf}}
\centerline{and examples in {\tt\fontname\tentt}.}
\centerline{{\it\fontname\tenit\/},}
\centerline{{\bf\fontname\tenbf}, and}
\centerline{{\sl\fontname\tensl\/}}
\centerline{are used for emphasis.}\vfill}
\page\colophon
% Blame: doc@cygnus.com, 1991.
@end tex

@bye
