\input texinfo @c -*-texinfo-*-

@c %**start of header
@setfilename vcdimager.info
@settitle The GNU Video CD Image Maker
@setchapternewpage on
@c %**end of header

@afourpaper

@include version.texi

@ifinfo
This file documents GNU VCDImager, The GNU Video CD Authoring Tools.

Copyright (C) Herbert Valerio Riedel @email{<hvr@@gnu.org>}

@sp 2
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.1 or
any later version published by the Free Software Foundation; with no
Invariant Sections, one Front-Cover Text: "GNU VCDImager by Herbert
Valerio Riedel et al." and one Back-Cover Text: "GNU VCDImager can be
obtained at @uref{http://www.gnu.org/software/vcdimager/}. The author is
reachable at @email{hvr@@gnu.org}".  A copy of the license is included
in the section entitled "GNU Free Documentation License".
@end ifinfo

@titlepage
@title GNU VCDImager
@subtitle $Id: vcdimager.texi,v 1.45 2005/06/18 04:11:08 rocky Exp $
@subtitle The GNU Video CD Authoring Tools.
@subtitle for version @value{VERSION}, @value{UPDATED}
@author Herbert Valerio Riedel et al.

@page
@smallexample
pub  1024D/883F4142 2001-03-19 Herbert Valerio Riedel <hvr@@kernel.org>
     Key fingerprint = 7BB9 2D6C D485 CE64 4748  5F65 4981 E064 883F 4142
uid                            Herbert Valerio Riedel <hvr@@gnu.org>
@end smallexample

@vskip 0pt plus 1filll

Copyright @copyright{} 2001 Herbert Valerio Riedel @email{<hvr@@gnu.org>}
@sp 1
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.1 or
any later version published by the Free Software Foundation; with no
Invariant Sections, one Front-Cover Text: ``GNU VCDImager by Herbert
Valerio Riedel et al.'' and one Back-Cover Text: ``GNU VCDImager can be
obtained at @uref{http://www.gnu.org/software/vcdimager/}. The author is
reachable at @email{hvr@@gnu.org}.''.  A copy of the license is included
in the section entitled ``GNU Free Documentation License''.
@end titlepage

@c @summarycontents
@contents

@dircategory Video CD Tools
@direntry
* VCDImager: (vcdimager).                       GNU Video CD imaging utilities
* vcdimager: (vcdimager)vcdimager.              Video CD simple formatter
* vcd-info:  (vcdimager)vcd-info.               Video CD diagnostic tool
* cdxa2mpeg: (vcdimager)cdxa2mpeg.              Strip RIFF/CD-XA container
* vcdxminfo: (vcdimager)vcdxminfo.              Display MPEG stream properties
* vcdxgen: (vcdimager)vcdxgen.                  Video CD XML template generator
* vcdxbuild: (vcdimager)vcdxbuild.              Video CD XML formatter
@end direntry

@node Top, Introduction, (dir), (dir)

@menu
* Introduction::                
* Video CD Concepts::           
* Reference::                   
* Video CD XML Description::    
* Examples::                    
* Tips and Hints::              
* ISO 9660 Character Sets::              
* Glossary::          
* GNU General Public License::  
* GNU Free Documentation License::  
* XML Tag Index::               
* Concept Index::               
@end menu

@node Introduction, Video CD Concepts, Top, Top
@unnumbered Introduction

This manual describes the @dfn{GNU VCDImager}@footnote{see
@uref{http://www.gnu.org/software/vcdimager/}} package, a tool-set for
authoring, disassembling and analyzing Video CD's and Super Video CD's.

@menu
* Supplied Tools::              
* Features::                    
@end menu

@node Supplied Tools, Features, Introduction, Introduction
@section Supplied Tools

The following command-line tools are provided with this package:

@table @command
@item vcdimager
Simple front-end, allowing for easy command-line controlled generation of
basic @acronym{VCD} and @acronym{SVCD} disc images without an
intermediate @acronym{XML} description.

@item vcd-info
Selectively shows detailed information about the structure a Video CD.
See @xref{Top, , Introduction, vcd-info, The GNU Video CD Info Dump Program}.

@item vcdxgen
@acronym{XML} @acronym{VCD}-description generator, with a command-line
interface similar to the classic @command{vcdimager} front-end. See
@ref{vcdxgen}.

@item vcdxbuild
Builds a @acronym{VCD}/@acronym{SVCD} according to a supplied
@acronym{XML} description and files containing the @acronym{MPEG}
program streams referred to in the @acronym{XML} description.
See @xref{vcdxbuild}.

@item vcdxrip
Disassembles a given @acronym{VCD} or @acronym{SVCD} disc into a
@acronym{XML} description and the contained @acronym{MPEG} program
streams. See @xref{vcdxrip}.

@item vcdxminfo
This is a debugging tool for displaying some @acronym{MPEG}
properties, as conceived by internal library @code{libvcd} and
@code{libvcdinfo}. See @xref{vcdxminfo}.

@item cdxa2mpeg
@cindex RIFF CD-XA files
A program to strip the @acronym{RIFF} header on @acronym{CD-XA}-format
tracks.  See @xref{cdxa2mpeg}.
@end table

The generated @acronym{CD} images created are suitable for being
burnt on to @acronym{CD-R}, by the use of a CD-recording program which
recognizes the @acronym{BIN/CUE}-format, such as cdrdao@footnote{see
@uref{http://cdrdao.sourceforge.net}}, for instance.

@node Features,  , Supplied Tools, Introduction
@section Features

Features of the back-end library@footnote{the core of the GNU
VCDImager package consists of a private library named @code{libvcd}
and public library named @code{libvcdinfo}, the front-ends are just
user interfaces to the exported C-API}, on which all front-ends rely,
include:

@itemize @bullet
@item
Support for Video CD 1.1 and 2.0 disc format.

@item
Support for Super Video CD 1.0 and HQ Video CD 1.0@footnote{based on the
IEC-62107 specification with some extensions defined in the super-set
SVCD System Specification 1.0. Some support for the @emph{deprecated}
Chinese SVCD format is available through option switches.} disc format.

@item 
Full @acronym{PBC} support, including fully customizable play lists,
(multi default) selection lists and end lists.

@item
Support for segment (play) items (@acronym{SPI}).

@item
Support for up to 98 sequence items (@acronym{MPEG} tracks) per (Super)
Video CD.

@item
Support for additional entry points into sequence items.

@item
Support for defining auto pause points in sequence items and segment
items.

@item
General facility for adding files as mode 2 form 1 and mixed form
@acronym{XA} sectors to the @acronym{ISO-9660} file-system and setting
some labels in the @acronym{ISO-9660} @acronym{PVD}

@item
Supports 99 minute @acronym{CD-R} media@footnote{@dots{}though most devices
will have problems with such an out-of-specification media. You may want
use the @option{--sector-2336} option for images longer than 80
minutes}.

@item 
Image input support for GNU/Linux @code{ioctl()}-based cdrom devices,
@acronym{BIN/CUE} images and @acronym{NRG} images.

@end itemize

@node Video CD Concepts, Reference, Introduction, Top
@chapter Video CD Concepts

This chapter gives some background information regarding the underlying
Video CD technology.

@strong{Warning:} All information in this chapter is presented without
any warranty of accuracy or correctness. You are encouraged to send
corrections and improvements for this manual to
@email{bug-vcdimager@@gnu.org}.

@menu
* Overview::                    
* Anatomy of Video CDs::        
* Known Video CD Flavors::      
* The ISO-9660 Track::           
* Constraints on MPEG streams::  
* Play Items::                  
* Playback Control::            
@end menu

@node Overview, Anatomy of Video CDs, Video CD Concepts, Video CD Concepts
@section Overview

The Video Compact Disc (@dfn{Video CD} or @dfn{VCD}) is a standardized
digital video storage format. It is based on the commonly available
Compact Disc technology, which allows for low cost video authoring.
Video CD's can be played in most @acronym{DVD} standalone player,
dedicated VCD players and finally, modern Personal Computers with
multimedia support.

@node Anatomy of Video CDs, Known Video CD Flavors, Overview, Video CD Concepts
@section Anatomy of Video CD's
@cindex Video CD layout
@cindex @acronym{SPI} area

Basically a Video CD is made up of @acronym{CD-ROM XA} sectors,
i.e. @acronym{CD-ROM} mode 2 form 1 & 2 sectors. Non-@acronym{MPEG} data
is stored in mode 2 form 1 sectors with a user data area of 2048 byte,
which have a similiar L2 error correction and detection
(@acronym{ECC}/@acronym{EDC}) to @acronym{CD-ROM} mode 1 sectors. While
realtime @acronym{MPEG} streams is stored in @acronym{CD-ROM} mode 2
form 2 sectors, which by have no L2 @acronym{ECC}, yield a ~14% greater
user data area consisting of 2324 bytes@footnote{actually raw mode 2
sectors have a 2336 byte user data area, but parts of it are used for
error codes and headers when using the mode 2 form 1 or form 2
configurations.}

@strong{Warning:} Realtime @acronym{MPEG} streams on Video CD's are only
protected by L2 error detection (but no correction!), @acronym{EDC}, and
@acronym{CIRC} encoding. Thus Video CD's are more easily affected by
scratches and alike on the @acronym{CD-ROM} media surface.

In general, a Video CD is made up of several mode 2 (and optionally
@acronym{CD-DA}) tracks. The layout of a Video CD is as follows:

@itemize @bullet
@item
lead-in area containing the TOC.

@item
Mandatory pre-gap consisting of 150 sectors (@code{00:00:00} --
@code{00:01:74}).

@item
ISO-9660 data track. The beginning of this track is defined to have the
@acronym{LSN} @code{0}. @xref{The ISO-9660 Track}.

@itemize @bullet 
@item 
@cindex @acronym{PVD} area
ISO-9660 structure at @code{00:02:00} consisting of 16 empty sectors,
primary volume descriptor (@dfn{PVD}) and directory records with file
pointers to information area structures (described below) and external
pointers to @acronym{MPEG}/@acronym{CD-DA} tracks following the
ISO-9660 data track.

@item
Optional karaoke area at @code{00:03:00}. (not supported yet by vcdimager)

@item
Video CD information area at @code{00:04:00}.

@item
Optional segment play item area with @acronym{MPEG} items aligned in 150
sector segments. There can be up to 1980 segments on a disc.

@item
Optional program and data file area, for additional files added to the
ISO-9660 track.

@end itemize

@item
Up to 98 @acronym{MPEG} mode 2 form 2 tracks wrapped in front and rear
margin@footnote{Margins seem to be used, in order to compensate for
inaccurate sector addressing issues on @acronym{CD-ROM}
media. Interestingly, they have been abandoned for the Super Video
CD.} empty sectors and preceded by (at least) 150 empty sector
pre-gaps.

@item
150 sector post-gap after the last mpeg track, as required by the
ECMA-130 standard.

@item
Up to 97@footnote{the maximum number of tracks on a Video CD must not
exceed 99 tracks} @acronym{CD-DA} tracks. (not supported yet by
vcdimager)

@item
Lead-out area.

@end itemize

@node Known Video CD Flavors, The ISO-9660 Track, Anatomy of Video CDs, Video CD Concepts
@section Known Video CD Flavors
@cindex Video CD variants

There are different Video CD flavors commonly used. The following
sections tries to explain the differences amongst them.

See also @uref{http://www.dvdrhelp.com/vcd} and
@uref{http://www.dvdrhelp.com/svcd}.

@menu
* Video CD 1.1::                
* Video CD 2.0::                
* Extended Video CD::           
* Super Video CD 1.0::          
* HQ Video CD 1.0::             
* Extended Super Video CD::     
@end menu

@node Video CD 1.1, Video CD 2.0, Known Video CD Flavors, Known Video CD Flavors
@subsection Video CD 1.1

This is the most basic Video CD specification dating back to
1993@footnote{actually this flavor was based on the Karaoke-CD, which
was the first @acronym{MPEG} based @acronym{CD-ROM} format.}, which has
the following characteristics:

@itemize @bullet
@item
One mode 2 mixed form ISO-9660 track containing file pointers to the
information areas.

@item
Up to 98 multiplex-ed @acronym{MPEG}-1 audio/video streams or
@acronym{CD-DA} audio tracks.

@item
Up to 500 @acronym{MPEG} sequence entry points used as chapter
divisions.

@end itemize

The Video CD specification requires the multiplex-ed @acronym{MPEG}-1
stream to have a @acronym{CBR} of less than 174300 bytes (1394400 bits)
per second@footnote{2324 bytes of payload per sector * 75 sectors per
second = 174300 bytes per second} in order to accommodate single speed
@acronym{CD-ROM} drives. The specification allows for the following two
resolutions@footnote{Actually even @acronym{PAL} resolution works
depending on the playing device}:

@itemize @bullet
@item
352 x 240 @@ 29.97 fps (@acronym{NTSC} @acronym{SIF}).
@item
352 x 240 @@ 23.976 fps (@acronym{FILM} @acronym{SIF}).
@end itemize

The @acronym{CBR} @acronym{MPEG}-1, layer II audio stream is fixed at
224 kbps with 1 stereo or 2 mono channels.  It is recommended to keep
the video bit-rate under 1151929.1 bps@footnote{It should be noted, that
in addition to the audio stream and the video stream, there are also
bits consumed by the program stream encapsulation which have to be taken
into account for bit-rate calculations}.

@node Video CD 2.0, Extended Video CD, Video CD 1.1, Known Video CD Flavors
@subsection Video CD 2.0
@cindex VCD
@cindex XVCD

About two years after the Video CD 1.1 specification came out, an
improved Video CD 2.0 standard was published in 1995. This one added the
following items to the features already available in the Video CD 1.1
specification:

@itemize @bullet
@item
Support for @acronym{MPEG} segment play items (@dfn{SPI}), consisting of
still pictures, motion pictures and/or audio (only) streams was
added. @xref{Segment Items}.

@item
Support for interactive playback control (@dfn{PBC}) was added.

@item
Support for playing related access by providing a scan point index file
was added. (@file{/EXT/SCANDATA.DAT})

@item 
Support for closed captions.

@item
Support for mixing @acronym{NTSC} and @acronym{PAL} content.

@end itemize

@noindent
By adding PAL support to the Video CD 1.1 specification, the following
resolutions became available:
@itemize @bullet
@item
352 x 240 @@ 29.97 fps (@acronym{NTSC} @acronym{SIF}).
@item
352 x 240 @@ 23.976 fps (@acronym{FILM} @acronym{SIF}).
@item
352 x 288 @@ 25 fps (@acronym{PAL} @acronym{SIF}).
@end itemize

For segment play items the following audio encodings became available:

@itemize @bullet
@item
Joint stereo, stereo or dual channel audio streams at 128, 192, 224 or
384 kbit/sec bit-rate.

@item
Mono audio streams at 64, 96 or 192 kbit/sec bit-rate.
@end itemize

Also the possibility to have audio only streams and still
pictures@footnote{in addition to the resolutions already defined for
motion video, also high resolutions are available for still pictures,
which are 704 x 480 (@acronym{NTSC} Full @acronym{D1}) and 704 x 576
(@acronym{PAL} Full @acronym{D1})} was provided. The bit-rate of
multiplex-ed streams should be kept under@footnote{Alas it seems, that
for @emph{strict} Video CD 2.0 compliance, it's required to pad the
stream exactly to 1x muxrate. The Super Video CD format does not have
this flaw.} 174300 bytes/sec (except for single still picture items) in
order to accommodate single speed drives.

@node Extended Video CD, Super Video CD 1.0, Video CD 2.0, Known Video CD Flavors
@subsection Extended Video CD

Also known as @dfn{XVCD}, this is not an official standard. It's
actually just a name for VCD's which do not conform with the official
standards in order to use the additional performance of the
@acronym{DVD} decoders and thus achieve better image quality. Such an
XVCD may be unsupported by many available stand-alone playing devices.

See also @uref{http://www.dvdrhelp.com/xvcd.htm}

@node Super Video CD 1.0, HQ Video CD 1.0, Extended Video CD, Known Video CD Flavors
@subsection Super Video CD 1.0



With the upcoming of the @acronym{DVD-V} media, a new VCD standard had
to be published in order to be able to keep up with technology, so the
Super Video CD specification was called into life 1999.

In the midst of 2000 a full subset@footnote{The features left out in
this subset are: subtitles, command lists, extended pbc (hotspots and
disc changer support).} of this Super Video CD specification was
published as IEC-62107.

As the most notable change over Video CD 2.0 a switch from
@acronym{MPEG}-1 CBR to @acronym{MPEG}-2 VBR encoding for the video
stream was performed. The following new features---based on the
Video CD 2.0 specification---are:

@itemize @bullet 
@item 
Use of @acronym{MPEG}-2 encoding instead of @acronym{MPEG}-1 for the
video stream.

@item
Allowed VBR encoding of @acronym{MPEG}-1 audio stream.

@item
Higher resolutions (see below) for video stream resolution.

@item
Up to 4 overlay graphics and text (@dfn{OGT}) sub-channels for user
switchable subtitle displaying@footnote{There is also a non-compliant
subtitle format widely used, having its origins in the forgotten
@dfn{China Video Disc} or @dfn{Chaoji VCD} (@dfn{CVD}) specification,
which is said to have been a competitor for the Video CD 2.0
successor. See
@uref{http://www.dvdrhelp.com/forum/userguides/98177.php}. Vcdimager
recognizes both formats.} in addition to the already existing closed
caption facility.

@item
Command lists for controlling the @acronym{SVCD} virtual machine.

@end itemize

@noindent
For the Super Video CD, only the following two resolutions are supported
for motion video and (low resolution) still pictures@footnote{the same
high resolutions as defined for Video CD 2.0 apply for Super Video CD's}:

@itemize @bullet
@item
480 x 480 @@ 29.97 fps (@acronym{NTSC} 2/3 @acronym{D1}).
@item
480 x 576 @@ 25 fps (@acronym{PAL} 2/3 @acronym{D1}).
@end itemize

@noindent 
See also @uref{http://www.dvdrhelp.com/svcd} for another description
of SVCD and @uref{http://www.dvdrhelp.com/glossary} for a description
of the acronyms used above.

@node HQ Video CD 1.0, Extended Super Video CD, Super Video CD 1.0, Known Video CD Flavors
@subsection HQ Video CD 1.0
@cindex HQ-VCD
@cindex HQ Video CD 1.0

This is actually just a minor variation defined in IEC-62107 on the
Super Video CD 1.0 format for @emph{compatibility with current products
in the market}. It differs from the Super Video CD 1.0 format in the
following items:

@itemize @bullet
@item
The system profile tag field in @file{/SVCD/INFO.SVD} is set to @samp{1}
instead of @samp{0}.

@item
The system identification field value in @file{/SVCD/INFO.SVD} is set to
@samp{HQ-VCD} instead of @samp{SUPERVCD}.

@item
@file{/EXT/SCANDATA.DAT} is mandatory instead of being optional.

@item
@file{/SVCD/SEARCH.DAT} is optional instead of being mandatory.

@end itemize

@node Extended Super Video CD,  , HQ Video CD 1.0, Known Video CD Flavors
@subsection Extended Super Video CD
@cindex SVCD
@cindex XSVCD

Just like the XVCD, and thus also known as @dfn{XSVCD}, this is not an
official standard and may not work with all playing devices supporting
SVCD's.

@node The ISO-9660 Track, Constraints on MPEG streams, Known Video CD Flavors, Video CD Concepts
@section The ISO-9660 Track

@menu
* Primary Volume Descriptor::   
* Directory Structure::         
@end menu

@node Primary Volume Descriptor, Directory Structure, The ISO-9660 Track, The ISO-9660 Track
@subsection Primary Volume Descriptor

This ISO-9660 sector located at sector @acronym{LSN} 16 contains
general information about the ISO-9660 file-system, such as volume
label, the application used to create the CD, the preparer, the
publisher, file-system size, pointer to the root directory and so
on@dots{}

@node Directory Structure,  , Primary Volume Descriptor, The ISO-9660 Track
@subsection Directory Structure
@cindex Video CD file-system

@menu
* /VCD & /SVCD Directory::      
* /MPEGAV & /MPEG2 Directory::  
* /CDDA Directory::             
* /SEGMENT Directory::          
* /EXT Directory::              
* /CDI Directory::              
@end menu

@node /VCD & /SVCD Directory, /MPEGAV & /MPEG2 Directory, Directory Structure, Directory Structure
@subsubsection @file{/VCD} & @file{/SVCD} Directory

This directories (@file{/SVCD} is used on Super Video CD's) contain file
entries to structures contained in the information area of a (Super)
Video CD.

@table @file
@item /VCD/INFO.VCD
General video disc information (e.g. album id, size of volume set and
number of @acronym{MPEG} items)

@item /VCD/ENTRIES.VCD
Entry point table.

@item /VCD/LOT.VCD
@cindex @acronym{LOT} area
List ID Offset Table into @file{PSD.VCD} (only allowed for Video CD 2.0
discs with @acronym{PBC})

@item /VCD/PSD.VCD
@cindex @acronym{PSD} area
Play sequence descriptor file (only allowed for Video CD 2.0 discs with
@acronym{PBC}). This file may contain so-called lists (selection lists,
play lists and end lists) which represent the @acronym{PBC}.

@item /SVCD/INFO.SVD
@itemx /SVCD/ENTRIES.SVD
@itemx /SVCD/LOT.SVD
@itemx /SVCD/PSD.SVD
These are the corresponding file names on Super Video CD's, and fulfill
the same purpose as those defined for the Video CD 2.0 format.

@item /SVCD/SEARCH.DAT
This file, mandatory for Super Video CD's, contains access point sector
addresses. @xref{Access Point Sectors}.

@item /SVCD/TRACKS.SVD
In this file additional information (e.g. playing time and stream
characteristics) about each sequence track is recorded.

@end table

@node /MPEGAV & /MPEG2 Directory, /CDDA Directory, /VCD & /SVCD Directory, Directory Structure
@subsubsection @file{/MPEGAV} & @file{/MPEG2} Directory

This file contains file entries pointing to the sequence items contained
in the tracks after the ISO-9660 track.

@node /CDDA Directory, /SEGMENT Directory, /MPEGAV & /MPEG2 Directory, Directory Structure
@subsubsection @file{/CDDA} Directory

This file contains file entries pointing to optional CDDA tracks after
the ISO-9660 track. This feature is not available for Super Video CD's.

@node /SEGMENT Directory, /EXT Directory, /CDDA Directory, Directory Structure
@subsubsection @file{/SEGMENT} Directory

This directory contains file entries to segment play
items. @xref{Segment Items}.

@node /EXT Directory, /CDI Directory, /SEGMENT Directory, Directory Structure
@subsubsection @file{/EXT} Directory

@table @file
@item /EXT/LOT_X.VCD
@itemx /EXT/PSD_X.VCD
These are only defined for Video CD 2.0, and contain the extended
@acronym{PBC}, which adds area definitions for pointer based selection
and/or highlighting of selection areas. (On Super Video CD's the extended
@acronym{PBC} has been merged into the main @file{/SVCD/PSD.SVD} file)

@item /EXT/SCANDATA.DAT
This file is optional, and defined (but with a different format) for
Video CD 2.0 and Super Video CD 1.0 formats. It contains playing time
related access information very similar to the @file{/SVCD/SEARCH.DAT}
file.

@item /EXT/CAPTnn.DAT
Closed caption data file entries.

@end table

@node /CDI Directory,  , /EXT Directory, Directory Structure
@subsubsection @file{/CDI} Directory

This directory is provided for @acronym{CD-i} player applications. (Only
useful for Video CD's)

@node Constraints on MPEG streams, Play Items, The ISO-9660 Track, Video CD Concepts
@section Constraints on @acronym{MPEG} streams
@cindex MPEG input streams

GNU VCDImager expects @acronym{MPEG} streams in a format suitable for
(Super) Video CD production. Only a few cases where the @acronym{MPEG}
streams fail to adhere to this requirement are detected, thus it's up to
the user to ensure that the constraints are fulfilled. All
@acronym{MPEG} streams are expected to be packetized program streams.

@menu
* Video CD::                    
* Super Video CD::              
* Common Constraints::          
@end menu

@node Video CD, Super Video CD, Constraints on MPEG streams, Constraints on MPEG streams
@subsection Video CD

The Video CD specification requires the multiplex-ed @acronym{MPEG}-1
stream to have a bit rate of about 174300 bytes per second. The video
stream is required to have one of the following resolutions:

@itemize @bullet
@item
352 x 240 @@ 29.97 fps (@acronym{NTSC}).
@item
352 x 240 @@ 23.976 fps (@acronym{FILM}).
@item
352 x 288 @@ 25 fps (@acronym{PAL}) (not supported on VCD 1.x!).
@end itemize

@noindent
See also @uref{http://www.dvdrhelp.com/forum/userguides/94382.php}
and @uref{http://www.dvdrhelp.com/glossary} for a description
of the acronyms used above.

The audio stream must be @acronym{MPEG}-1 layer II, fixed to a 224
kbits/sec @acronym{CBR} with 1 joint stereo, stereo or dual channel
audio stream, and a sampling rate of 44.1 kHz at 16 bit resolution.

@node Super Video CD, Common Constraints, Video CD, Constraints on MPEG streams
@subsection Super Video CD

When creating Super Video CD images @acronym{MPEG}-2 @acronym{VBR}
streams are expected with a maximum allowed bit-rate of approximately
2.6 mbits/sec.  The following video resolutions are (officially)
supported@footnote{actually you can try other resolutions as well,
but then you are leaving the SVCD specification behind you@dots{}}:

@itemize @bullet
@item
480 x 480 @@ 29.97 fps (@acronym{NTSC}).
@item
480 x 576 @@ 25 fps (@acronym{PAL}).
@end itemize

The audio stream must be @acronym{MPEG}-1 layer II, with a bit-rate
ranging from 32 to 384 kbits/sec bit-rate (i.e. the audio stream
@emph{is} allowed to be @acronym{VBR}!) with up to 2 stereo or 4 mono
channels, or 1 extended @acronym{MPEG}-1/2 multichannel (5+1) surround
sound stream.

@menu
* Scan Information Data::       
* SVCD Subtitles::              
@end menu

@node Scan Information Data, SVCD Subtitles, Super Video CD, Super Video CD
@subsubsection Scan Information Data
@cindex MPEG scan information user data

According to the specification, it is mandatory for Super Video
CD's@footnote{It seems to be optionally supported for the Video CD 2.0}
to encode scan information data into user data blocks in the picture
layer of all intra coded picture. It can be used by playing devices for
implementing fast forward & fast reverse scanning.

The already existing scan information data can be updated by enabling
the @code{update scan offsets} option. @xref{<option> Element}.

@node SVCD Subtitles,  , Scan Information Data, Super Video CD
@subsubsection SVCD Subtitles
@cindex Subtitles
@cindex OGT

There exist two major subtitle formats for SVCD's, of which only
one---@dfn{Overlay Graphics Text} or @acronym{OGT}---is officially
supported.  The non-compliant one has it's origin in the so-called
@acronym{CVD} format, a competitor for the Video CD 2.0 successor. The
@emph{real} SVCD subtitle format is part of the Super Video
Specification, wheras the @acronym{CVD}-style subtitle format is
not. Alas the latter one is more widely used, due to older pre-SVCD
aged software only supporting the non-compliant @acronym{CVD} subtitle
format.

Compliant SVCD subtitles are transported in a @code{private_stream_1}
stream with only the @code{private_data_id} @code{0x70}@footnote{While
AC3 tracks use the @code{private_data_id} @code{0x80+}, @acronym{DVD}
subtitles @code{0x20} onwards and @acronym{CVD} subtitles @code{0x00}
and up.}. The @code{sub_stream_id} is used to distinguish between the 4
available subtitle channels.

As of the time of writing, there is only a proof of concept
implementation (read @emph{hack}) for creating proper SVCD
subtitles. The source code is available from the contribs download
directory, but its use is not recommended for production use. If you are
searching for a new free software project, you could take this as an
idea@dots{}

@node Common Constraints,  , Super Video CD, Constraints on MPEG streams
@subsection Common Constraints

@menu
* Alignment::                   
* Access Point Sectors::        
@end menu

@node Alignment, Access Point Sectors, Common Constraints, Common Constraints
@subsubsection Alignment
@cindex MPEG padding

The @acronym{MPEG} program streams should be aligned to 2324
byte @acronym{MPEG} packet boundaries@footnote{i.e. pack headers must be
repeated every 2324 bytes, starting on byte 0}. If the pack headers
should happen not be aligned on 2324 byte boundaries, GNU VCDImager will
try@footnote{aligning only works, if @acronym{MPEG} packets are
@emph{not} bigger than 2324 bytes.} to align them on the fly while
issuing a warning that padding was needed. @strong{Warning:} Padding the
@acronym{MPEG} streams causes the bit-rate at which the data is read to
be increased, this may lead to undesirable effects.

If the image generation process should abort with an @acronym{MPEG}
related error message, it maybe either due to a bug or due to a
corrupted or non-compliant @acronym{MPEG} stream coding. In this case
re-encoding or re-multiplexing may help.

@node Access Point Sectors,  , Alignment, Common Constraints
@subsubsection Access Point Sectors
@cindex MPEG Access point sector

An @dfn{Access Point Sector}, @acronym{APS}, is an @acronym{MPEG} video
sector on the @acronym{VCD}/@acronym{SVCD} which is suitable to be
jumped to directly. @acronym{APS} are required for entry points and
scantables.

@acronym{APS} have to fulfill the requirement to precede every I-frame
by a GOP header which shall be preceded by a sequence header in its
turn. The start codes of these 3 items are required to be contained all
in the same mpeg pack/sector, thus forming a so-called @dfn{access
point sector}.

This requirement can be relaxed by enabling the @code{relaxed aps}
option, i.e. every sector containing an I-frame will be regarded as an
@acronym{APS}. @strong{Warning:} The sequence header is needed for a
playing device to figure out display parameters, such as display
resolution and frame rate, relaxing the aps requirement may lead to
non-working entry points.

@node Play Items, Playback Control, Constraints on MPEG streams, Video CD Concepts
@section Play Items

@dfn{Play items} are the @acronym{MPEG} payload on (Super) Video
CD's. Sequences are useful for seamless play of larger video
sections. However they can't be used for playing still frames.
Segments on the other hand, are better for smaller items in
interactive applications and can be used for still frames which are
often used in menus.

@menu
* Sequence Items::              
* Segment Items::               
@end menu

@node Sequence Items, Segment Items, Play Items, Play Items
@subsection Sequence Items

Each @dfn{sequence} is put in its own @acronym{CD} track. Motion video
stream is required, with optionally up to 2 audio streams.

@subsubheading Advantages

@itemize @bullet
@item 
Can be directly accessed without requiring @acronym{PBC}.

@item 
Size of of sequence is not broken up into 150-sector units as it is
with a segment.

@item
Entry points which allow access to ``Chapters'' or ``Scenes'' within
the larger segment unit.

@end itemize

@subsubheading Disadvantages

@itemize @bullet
@item
Pre-gap of 150 empty sectors.

@item
Limit of 98 sequences.

@item
Must contain motion video (and audio for Video CD 2.0) --- no still frames!

@end itemize

@node Segment Items,  , Sequence Items, Play Items
@subsection Segment Items
@cindex @acronym{SPI} area

Segment items are stored in the so-called @acronym{SPI} area, which
consists of up to 1980 allocation units which are called
@dfn{segments}. Each segment consists of 150 @acronym{XA} form 2
sectors.  Thus the @acronym{SPI} area can contain up to 658 MB of
real-time data@footnote{@math{1980 * 150 * 2324 = 690228000} bytes}. 

A segment (play) item is a @acronym{MPEG} stream stored in one or more
consecutive segments. A segment item can be
@itemize @bullet
@item 
@acronym{MPEG} video with @emph{optional} @acronym{MPEG} audio.

@item
@acronym{MPEG} encoded still pictures with @emph{optional}
@acronym{MPEG} audio.

@item
@acronym{MPEG} audio only.@footnote{Which allows for several hours of
audio only play back to fit on a @acronym{CD-ROM}.}
@end itemize

@subsubheading Advantages

@itemize @bullet
@item
Up to 1980 segment items possible.

@item
Still pictures and audio only @acronym{MPEG} streams allowed.

@item
No pre-gaps.

@end itemize

@subsubheading Disadvantages

@itemize @bullet
@item
Only accessible through @acronym{PBC}.

@item
Segment item size limited by @acronym{SPI} area size.

@item
Segment item size is fixed to 150 sectors (the same as the gap between
tracks) which may be wasteful of space. If you have a large number of
small motion videos, it might be advantageous to combine them into a
track and use entry points into the track. ``Continued'' segments
allow for logical segments (something you refer to as a segment in
authoring) to be larger than 150 segments. However breaking a logical
segments up into many small physical segments is not as clean as
having one physical unit for one logical unit. And there may be
additional fragmentation in the form of internal sector padding. 

@end itemize

@node Playback Control,  , Play Items, Video CD Concepts
@section Playback Control
@cindex PBC (Playback control)
@cindex Interactivity, Video CD support for

@dfn{Playback control}, @acronym{PBC}, is available for Video CD 2.0 and
Super Video CD 1.0 disc formats. @acronym{PBC} allows control of the
playback of play items@footnote{sequence items and segment items} and
the possibility of interaction with the user through the remote control
or some other input device available.

@menu
* Function Keys for Interaction::  
* Linear Playback::             
* PBC Lists::                   
* Applications::                
@end menu

@node Function Keys for Interaction, Linear Playback, Playback Control, Playback Control
@subsection Function Keys for Interaction
@cindex Keys, on the remote control

The following keys are usually found on the remote control belonging to
the playing device.

@table @key
@item NEXT
May also look like @key{>>|} on the remote control.

@item PREVIOUS
May also look like @key{|<<} on the remote control.

@item DEFAULT
This key is usually mapped to the @key{>} or @key{PLAY} key.

@item RETURN
This key may be mapped to the @key{STOP} key.

@item NUMERIC
This is actually a pseudo key, representing the numeric keys @key{0},
@key{1}, @dots{}, @key{9}.

@end table

@node Linear Playback, PBC Lists, Function Keys for Interaction, Playback Control
@subsection Linear Playback
@cindex Chapters

This playback mode is active, when the @acronym{PSD} is not
interpreted. In this mode, the @key{NUMERIC} key causes to start
playback at the entry in @file{ENTRY.VCD}/@file{ENTRY.SVD} with the
index number pressed. The @key{NEXT} and @key{PREVIOUS} keys play the
next or previous entry in that the entry file. This mode allows for
compliant playing devices to honor the entry points defined as chapter
division markers@footnote{in fact even when the play item is contained
in a play-list it should allow to jump between the entry points with the
@key{NEXT}/@key{PREVIOUS} keys.}. Alas, only a few playing devices are
capable of honoring Video CD chapters.

@node PBC Lists, Applications, Linear Playback, Playback Control
@subsection PBC Lists

The control structures involved in @acronym{PBC} are called @dfn{lists}
and are stored in the @dfn{play sequence descriptor} file.

@menu
* Play List::                   
* Selection List::              
* End List::                    
* Command List::                
@end menu

@node Play List, Selection List, PBC Lists, PBC Lists
@subsubsection Play List

A @dfn{Play list} is basically a collection of play items which are to
be played in the order specified. Play lists allow to define target
lists for the @key{NEXT}, @key{PREVIOUS} and @key{RETURN} keys on the
remote control. Navigation for @key{NEXT}, @key{PREVIOUS} and
@key{RETURN} are associated with the entire play-list. Thus,
navigation is not updated if an entry passes through to the next
entry, but only when passing from one list id to another.

@node Selection List, End List, Play List, PBC Lists
@subsubsection Selection List
@cindex Menus

@dfn{Selection lists} can be used to offer a user selection based on
numeric (@key{NUMERIC}) input or---if available---pointer device based
selection, while showing a play item.

All of the navigation units available in a play list (@key{NEXT},
@key{PREVIOUS}, @key{RETURN} can be used in a selection list. But in
contrast to a play list, there are additional features: menu selection
(mentioned above), random selection, default target (@key{DEFAULT}),
timeout target and looping.

As with play lists, the navigation is associated with the entire list
id. Thus, navigation is not updated if an entry passes through to the
next entry; only when passing from one list id to another.

@subsubheading Hot-spots
@cindex Menu selection areas
@cindex Menu highlighting

The Video CD format allows for so-called hot-spots in selection lists,
which are used to define areas on the screen for selection targets,
which can be used for pointer device based selection in addition to the
@key{NUMERIC} input, and/or for highlighting of areas on the screen on
selection.

The coordinate system used in menu-selection areas divides the entire
viewable part of the screen into coordinates along the x and y axes
from (x1,y1)=(0,0) in the upper left to the lower right
(x2,y2)=(255,255), regardess the screen resolution or aspect ratio.

Alas menu-selection areas and menu highlighting, however useful may
not supported among playing devices.

@subsubheading Multi Default Selection List

@dfn{Multi default selection lists} are a special variant of selection
lists which allow for defining different @key{DEFAULT} key targets,
depending on which section of the play item the playback is currently
in. The various sections are defined by using entry points which mark
the boundaries.

@node End List, Command List, Selection List, PBC Lists
@subsubsection End List

An @dfn{end list} can be used to terminate the interpretation of the
@acronym{PBC} information.

@node Command List,  , End List, PBC Lists
@subsubsection Command List

@dfn{Command lists} are an optional feature defined for Super Video CD's,
allowing to execute opcodes in a virtual machine, allowing for enhanced
interactivity.

@node Applications,  , PBC Lists, Playback Control
@subsection Applications

@emph{...to be written...}

@node Reference, Video CD XML Description, Video CD Concepts, Top
@chapter Reference

@menu
* Tools::                       
@end menu

@node Tools,  , Reference, Reference
@section Tools

@menu
* vcdimager::             vcdimager - build VCD image for burning
* vcd-info::              vcd-info  - show information about a VCD image
* vcdxgen::               vcdxgen   - Video CD XML template generator
* vcdxbuild::             vcdxbuild - build VCD image via an XML file
* vcdxrip::               vcdxrip   - rip/extract a VCD 
* vcdxminfo::             vcdxminfo - Display MPEG stream properties
* cdxa2mpeg::             cdxa2mpeg - Strip RIFF/CDXA container
@end menu

@node vcdimager, vcd-info, Tools, Tools
@subsection @command{vcdimager}

This is the classic front-end, which is maintained only for ease of use
and because it does not relay on @command{libxml2} and thus may be the
only built front-end. @command{vcdimager} does not create a dummy
@acronym{PBC} anymore as in the past. It is recommended to familiarize
with the @acronym{XML} front-ends, in order to be able to use the
extended features offered by GNU VCDImager.

There are a few command-line options for @command{vcdimager} at the
moment, please issue @samp{vcdimager --help} for an actual list of
available options.

@node vcd-info, vcdxgen, vcdimager, Tools
@subsection @command{vcd-info}

Selectively shows detailed information about the structure a Video CD.
This might be helpful in diagnosing problems. This program was
originally called @code{vcddebug}. @xref{Top, , Introduction,
vcd-info, The GNU Video CD Dump Program}.

@node vcdxgen, vcdxbuild, vcd-info, Tools
@subsection @command{vcdxgen}

This tool works almost like the @command{vcdimager} tool, except that it
creates an intermediate @acronym{XML} description, instead of directly
building the disc image. This @acronym{XML} can be used as a starting
point for customization.

The @acronym{XML} file can then be fed to @command{vcdxbuild} for
building the actual image file(s).

@emph{FIXME: write more}

@menu
* Adding Files to the Video CD ::  
* CD-i Support::                
@end menu

@node Adding Files to the Video CD, CD-i Support, vcdxgen, vcdxgen
@subsubsection Adding Files to the Video CD 

Files can be added to the @acronym{ISO} file-system, that is the first
track of the Video CD, by making use of the command-line options
@option{--add-file=@var{FILE},@var{ISO_FILENAME}} and
@option{--add-file-2336=@var{FILE},@var{ISO_FILENAME}}.  The latter
option allows you to include files containing the complete user data
of mode 2 @acronym{CD-ROM} sectors @footnote{8 bytes for sub-header,
2324 bytes payload (which contains 276 bytes @acronym{ECC} for form 1)
and finally 4 bytes for @acronym{EDC}}.

@cindex ISO-9660 filename constraints
The path name given as @var{ISO_FILENAME} determines where to link the
file in the file-system of the Video CD. The given path name must be a
valid ISO-9660 file name with the following restrictions:
@itemize @bullet
@item
The Character set is restricted to upper case letters, numbers, 
underscore @samp{_}, dot @samp{.} and slash @samp{/}, 
@xref{ISO646 d-Characters}.

@item
The maximum file name length is restricted to 31 characters, the
directory nesting level is restricted to 8 and the maximum path length
is limited to 255 characters.

@item
File names must contain exactly one dot.@footnote{if no file name
extension is supposed to exist the dot must be placed as a trailing
dot.}

@item
ISO-9660 conformance level 1 restrictions apply, i.e. file names are
restricted to 8.3 characters.

@item
The path-name must not begin or end with a slash nor should it contain
slashes following directly each other.

@end itemize

If the parent directory for a file entry does not exist it will be
created automatically on demand.

@node CD-i Support,  , Adding Files to the Video CD , vcdxgen
@subsubsection CD-i Support
There is no specific CD-i support in GNU VCDImager. But you
can use the general facilities for adding a custom CD-i player
application. 

If you happen to have a CD-i application consisting of the files
@file{cdi_imag.rtf}, @file{cdi_text.fnt}, @file{cdi_vcd.app} and
@file{cdi_vcd.cfg}, with @file{cdi_vcd.app} being the main application
executable, you could add the following lines to your @file{~/.popt}
popt@footnote{see documentation for popt for more information about
option aliasing} aliasing file@footnote{add it to @file{/etc/popt} if
the setting should be available system-wide}

@example
vcdimager alias --cdi \
    --iso-application-id "CDI/CDI_VCD.APP;1" \
    --add-file-2336 /usr/share/cdi/cdi_imag.rtf,CDI/CDI_IMAG.RTF \
    --add-file      /usr/share/cdi/cdi_text.fnt,CDI/CDI_TEXT.FNT \
    --add-file      /usr/share/cdi/cdi_vcd.app,CDI/CDI_VCD.APP \
    --add-file      /usr/share/cdi/cdi_vcd.cfg,CDI/CDI_VCD.CFG 
@end example

@node vcdxbuild, vcdxrip, vcdxgen, Tools
@subsection @command{vcdxbuild}

This program allows to actually build a disc image, based on a given
@acronym{XML} description and the files referenced therein. It can be
thought of a Video CD @emph{compiler} for @acronym{XML} descriptions of
Video CD's.

@emph{FIXME: write more}

@node vcdxrip, vcdxminfo, vcdxbuild, Tools
@subsection @command{vcdxrip}

See @xref{Top, , Introduction, vcdxrip, The GNU Video CD Ripping
Program}.

@node vcdxminfo, cdxa2mpeg , vcdxrip, Tools
@subsection @command{vcdxminfo}

This tool allows to show basic properties of @acronym{MPEG} streams as
seen by the back-end library. Dumping of all @acronym{APS} contained
in the stream is supported as well.

@emph{FIXME: write more}

@node cdxa2mpeg, , vcdxminfo, Tools
@subsection @command{cdxa2mpeg}

A program to strip the @acronym{RIFF} header on CD-XA format tracks
containing a @acronym{RIFF} header.

On Microsoft Windows, people would extract the payload tracks of Video
CD's (e.g the tracks other than the first one) by simply copying the
.dat/.mpg files as seen in the filesystem of a (Video) CD.

Since many @acronym{MPEG} players will play tracks copied this way,
people tend to think of these as an @acronym{MPEG} files, but they are
not. Instead they have a @acronym{RIFF} container around the
@acronym{MPEG} stream, including some mode2 sector headers prepended
to each @acronym{MPEG} ``sector''. Presumably the @acronym{RIFF}
container is automatically inserted by the Operating System or
filesystem; it isn't part of a Video CD.

In such a setting, @code{cdxa2mpeg} will extract the @acronym{MPEG}
portion by stripping off the (inserted) @acronym{RIFF} container and
mode2 sector headers.

The name cdxa2meg refers to the fact that the program reads the
@acronym{CD-XA} format tracks and in such a circumstance where there
is a @acronym{RIFF} header, strips that off ``2'' make an
@acronym{MPEG} file.

The ability to see or copy the .dat/.mpg requires some sort of
filesystem support to read or show the @acronym{CD} Mode2 XA
tracks. Depending on the Operating System and filesystem support, seeing
@acronym{MPEG} tracks or having the contained in a @acronym{RIFF}
might not available or applicable.

A better, more universal way to extract MPEGs from a Video CD is to
use the @code{--tracks} option of @xref{vcdxrip}.

@node Video CD XML Description, Examples, Reference, Top
@chapter Video CD XML Description
@cindex DTD of Video CD XML

The @acronym{DTD} the @acronym{XML} description conforms to, can be
downloaded from @uref{http://www.gnu.org/software/vcdimager/videocd.dtd}.

This chapter is merely a reference. Pointers to examples and more
practical information about the XML structure used in vcdimager are
available at @uref{http://www.vcdimager.org/}.

The use of @command{vcdxgen} is recommended as a starting point point,
when creating an advanced @acronym{XML} description.@footnote{Graphical user
interfaces to aid @acronym{XML} editing are in development, if you want
to join the @acronym{GUI} development group, please get into contact
with me at @email{<hvr@@gnu.org>}.}

@menu
* Common Rules::                
* <videocd> Root::              
@end menu

@node Common Rules, <videocd> Root, Video CD XML Description, Video CD XML Description
@section XML Simplified Rules

@itemize @bullet
@item
All attribute values must be quoted.

@item
White space within content, including line breaks, is significant.

@item
All start tags (@samp{<pbc>}) must have corresponding end tags (@samp{</pbc>}).

@item
Tags without content and those which are empty elements must use the
@samp{/>}-notation, e.g.: @samp{<next-volume-use-lid2 />}.

@item
Elements must not overlap; they may be nested, however.

@item
Element names are case sensitive: @samp{<videocd>} and @samp{<VideoCD>}
are two different entities.
@end itemize

@section DTD Notation Reference

Each section of the description of the Video CD XML format begins with a
fragment from the Video CD DTD. The following table gives a simplified
(and incomplete) reference for the notational syntax.

@table @code
@item #PCDATA
parsed character data, i.e. only text without sub-elements allowed

@item EMPTY
empty, i.e. no sub-element allowed

@item ()
grouping 

@item A?
A or nothing (A is optional, but at most one A)

@item A+
one or more A's (at least one)

@item A*
zero or more A's (A optional, but could be several A's)

@item (A | B | C)
either A or B or C (but only one)

@item (A, B, C)
first A, followed by B, then C (all, and in this order)

@item (A & B)
both A and B, in any order

@end table

@section Video CD XML Conventions

@subheading Time Values
@cindex XML, time values in

All time related values---@code{<wait>}, @code{<autowait>},
@code{<playtime>}, @code{<start-time-offset>}, @code{<entry>} and
@code{<auto-pause>}---are given in seconds.

For the @code{<wait>} and @code{<autowait>} time entries the values
given are rounded to values of the following set:

@table @samp
@item -1
meaning an @emph{infinite} wait time. Negative values get rounded to
@samp{-1}.

@item 0
meaning no wait time.

@item 1
ranging from @samp{1} to @samp{60} in steps of 1, representing the time
to wait in whole seconds.

@item 60
ranging from @samp{60} to @samp{2000} in steps of 10, representing the
time to wait in whole seconds.

@item 2000
maximum wait time of 2000 seconds (33 minutes 20 seconds). Values larger
will be truncated to this maximum wait time.

@end table

For @code{<loop>} and @code{<playtime>} the value @samp{0} means
@emph{repeat forever} and @emph{play until end} accordingly.

@subheading Item IDs
@cindex XML Identifiers
@cindex Play nothing item

Items and their associated IDs fall into two categories, @emph{play
items} and @emph{PSD items}. Every reference to an ID has to be of the
right class, otherwise the reference can't be resolved, due to a failing
look up. A @emph{play item} can be any of the following:

@itemize @bullet
@item
play nothing item, (omitted @code{ref} attribute, e.g.: @code{<play-item />}).
@item
sequence item, @code{<sequence-item>}.
@item
entry point into sequence item, @code{<entry>}.
@item segment item
segment play item, @code{<segment-item>}.
@end itemize

@noindent
Whereas a @emph{PSD item} is required to be one of:

@itemize @bullet
@item
disabled, (omitted @code{ref} attribute, e.g.: @code{<select />}).
@item
selection list, @code{<selection>}.
@item
play list, @code{<playlist>}.
@item
end list, @code{<endlist>}.
@end itemize

@defindex tg

@node <videocd> Root,  , Common Rules, Video CD XML Description
@section @code{<videocd>} Root
@tgindex @code{videocd}

@menu
* <option> Element::            
* <info> Container::            
* <pvd> Container::             
* <filesystem> Container::      
* <segment-items> Container::   
* <sequence-items> Container::  
* <pbc> Container::             
@end menu

@example
@cartouche
<!ELEMENT videocd                       (option*,
                                         info,
                                         pvd,
                                         filesystem?,
                                         segment-items?,
                                         sequence-items,
                                         pbc?)>
<!ATTLIST videocd
  class        CDATA  #REQUIRED
  version      CDATA  #REQUIRED
  xmlns        %URI;  #FIXED 'http://www.gnu.org/software/vcdimager/1.0/'
>

<!ENTITY % URI "CDATA">
@end cartouche
@end example

@table @code
@item class
@itemx version

Supported combinations of @var{class} and @var{version} are listed below:
@multitable @columnfractions .10 .10 .80
@item @var{class} @tab @var{version} @tab Description
@item @samp{vcd}  @tab @samp{1.0}
@tab Video CD 1.0/Karaoke CD @emph{experimental}
@item @samp{vcd}  @tab @samp{1.1}
@tab Video CD 1.1
@item @samp{vcd}  @tab @samp{2.0}
@tab Video CD 2.0
@item @samp{svcd}  @tab @samp{1.0}
@tab Super Video CD 1.0 (IEC-62107)
@item @samp{hqvcd}  @tab @samp{1.0}
@tab HQ Video CD 1.0 (IEC-62107)
@end multitable

@item xmlns
The @code{xmlns} attribute defines the @acronym{XML} name-space.
@end table

@smallexample
@cartouche
<?xml version="1.0"?>
<!DOCTYPE videocd PUBLIC "-//GNU//DTD VideoCD//EN"
          "http://www.gnu.org/software/vcdimager/videocd.dtd">
<videocd xmlns="http://www.gnu.org/software/vcdimager/1.0/"
         class="svcd" version="1.0">
@dots{}
</videocd>
@end cartouche
@end smallexample

@node <option> Element, <info> Container, <videocd> Root, <videocd> Root
@subsection @code{<option>} Element
@tgindex @code{option}

@example
@cartouche
<!ELEMENT option                        EMPTY>
<!ATTLIST option 
  name         CDATA  #REQUIRED
  value        CDATA  #IMPLIED
>
@end cartouche
@end example

The following option @var{name} are recognized. 

@table @samp
@item svcd vcd30 mpegav
Rename @file{/MPEG2} folder on @acronym{SVCD}s to (non-compliant)
@file{/MPEGAV}.

Allowed @code{value} content: @samp{true}, @samp{false}. Default: @samp{false}.

@item svcd vcd30 entrysvd
Enables the use of the (deprecated) signature @samp{ENTRYSVD} instead of
@samp{ENTRYVCD} for the file @file{/SVCD/ENTRY.SVD}.

Allowed @code{value} content: @samp{true}, @samp{false}. Default: @samp{false}.

@item svcd vcd30 tracksvd
Enables the use of the (deprecated) chinese @file{/SVCD/TRACKS.SVD}
format which differs from the format defined in the IEC-62107
specification. The differences are most exposed on SVCDs containing more
than one video track.

Allowed @code{value} content: @samp{true}, @samp{false}. Default: @samp{false}.

@item track pregap

Used to set the track pre-gap for all tracks@footnote{except for the
first one, which is hardwired to 150 sectors} in sectors globally. The
specification requires the pre-gaps to be at least 150 sectors long.

Allowed @code{value} content: [@samp{1}..@samp{300}]. Default: @samp{150}.

@item track front margin

Set's the front margin for sequence items. For Video CD 1.0/1.1/2.0 this
margin should be at least 15 sectors long.

Allowed @code{value} content: [@samp{0}..@samp{150}]. Default: @samp{30}
for Video CD 1.0/1.1/2.0, otherwise (i.e. Super Video CD 1.0 and HQ-VCD
1.0) @samp{0}.

@item track rear margin

Set's the rear margin for sequence items. For Video CD 1.0/1.1/2.0 this
margin should be at least 15 sectors long.

Allowed @code{value} content: [@samp{0}..@samp{150}]. Default: @samp{45}
for Video CD 1.0/1.1/2.0, otherwise @samp{0}.

@item leadout pregap 

This option@footnote{Should have been better named @samp{data track
post-gap}.}  allows to set the amount of empty sectors added before the
lead-out area begins, i.e. the amount of post-gap sectors. The ECMA-130
specification requires the last data track before the lead-out to carry
a post-gap of at least 150 sectors, which is used as default for this
parameter.

Some operating systems may encounter I/O errors due to read-ahead issues
when reading the last mpeg track if this parameter is set to low.

Allowed @code{value} content: [@samp{0}..@samp{300}]. Default: @samp{150}.

@item leadout pause

@emph{DEPRECATED}. Use @samp{leadout pregap} instead. This option is
equivalent to setting the @samp{leadout pregap} option to the (default)
value @samp{150}.

Allowed @code{value} content: @samp{true}, @samp{false}. Default: @samp{true}.

@item relaxed aps
@cindex Relaxed @acronym{APS} constraints
This controls whether @acronym{APS} constraints are strict or
relaxed. @xref{Access Point Sectors}. 

Allowed @code{value} content: @samp{true}, @samp{false}. Default: @samp{false}.

@item update scan offsets
@cindex @code{update scan offsets}
This controls whether to update the scan data information contained in
the @acronym{MPEG}-2 video streams@footnote{It is required, that the
stream has already user data groups with scan information data, in order
for this feature to work}. @xref{Scan Information
Data}.

Allowed @code{value} content: @samp{true}, @samp{false}. Default: @samp{false}.

@end table

@smallexample
@cartouche
@dots{}
<videocd xmlns=@dots{}
  <option name="relaxed aps" value="true"/>
  <info>
@dots{}
@end cartouche
@end smallexample

@node  <info> Container, <pvd> Container, <option> Element, <videocd> Root
@subsection @code{<info>} Container
@tgindex @code{info}
@tgindex @code{album-id}
@tgindex @code{volume-count}
@tgindex @code{volume-number}
@tgindex @code{next-volume-use-sequence2}
@tgindex @code{next-volume-use-lid2}
@tgindex @code{restriction}
@tgindex @code{start-time-offset}

@example
@cartouche
<!ELEMENT info                          (album-id?,
                                         volume-count?,
                                         volume-number?,
                                         next-volume-use-sequence2?,
                                         next-volume-use-lid2?,
                                         restriction?,
                                         start-time-offset*)>

<!ELEMENT album-id                      (#PCDATA)>
<!ELEMENT volume-count                  (#PCDATA)>
<!ELEMENT volume-number                 (#PCDATA)>
<!ELEMENT next-volume-use-sequence2     EMPTY>
<!ELEMENT next-volume-use-lid2          EMPTY>
<!ELEMENT restriction                   (#PCDATA)>
<!ELEMENT start-time-offset             (#PCDATA)>
@end cartouche
@end example

The @code{<info>} section allows to customize the information contained
in the @file{VCD/INFO.VCD} or @file{VCD/INFO.SVD}.

@table @code
@item <album-id>
Name of the album@footnote{An @emph{album} is defined as a series of
discs which contain related content} which the discs belongs to. This id
is used in conjunction with the following elements to decide whether a
disc is the next volume of the currently played one.

The Content restricted to upto 16 d-characters, @xref{ISO646 d-Characters}.

@item <volume-count>
Total number of volumes (discs) in the album identified by @code{<album-id>}.

Allowed content: [@samp{1}..@samp{65535}]. Default: @samp{1}.

@item <volume-number>
Ordinal number of the volume (disc) in the album.

Allowed content: [@samp{0}..@samp{65535}]. Default: @samp{1}.
@end table

@noindent
The following elements are only supported for Video CD 2.0, Super Video
CD 1.0 and HQ Video CD 1.0.

@table @code
@item <next-volume-use-sequence2/>
If @acronym{PBC} interpretation is disabled, start the next disc if it
has the same @code{<album-id>} at the second sequence instead of the
first.

@item <next-volume-use-lid2/>
If @acronym{PBC} is present and interpretation enabled, start the next
disc if it has the same @code{<album-id>} at the second @acronym{PBC}
list instead of the first one.

@item <restriction>
Restriction category. This element allows to set viewing restrictions
which may be interpreted by the playing device. The allowed range goes
from @samp{0}, i.e. unrestricted, to @samp{3}, i.e. restriction category
3.@footnote{The exact meaning of the restriction categories is depending
on the interpreting playing device.}

@item <start-time-offset>
Only supported for Super Video CD 1.0 and HQ Video CD 1.0. Up to 5
@code{<start-time-offset>} may be defined, which represent the start
time offsets for the first 5 discs of an album. @emph{not implemented
yet}

@end table

@smallexample
@cartouche
@dots{}
  <info>
    <album-id>GNU_WARS_EP9</album-id>
    <volume-count>2</volume-count>
    <volume-number>1</volume-number>
    <next-volume-use-sequence2/>
  </info>
@dots{}
@end cartouche
@end smallexample

@node <pvd> Container, <filesystem> Container, <info> Container, <videocd> Root
@subsection @code{<pvd>} Container
@tgindex @code{pvd}
@tgindex @code{volume-id}
@tgindex @code{system-id}
@tgindex @code{application-id}
@tgindex @code{preparer-id}
@tgindex @code{publisher-id}

@example
@cartouche
<!ELEMENT pvd                           (volume-id?,
                                         system-id?,
                                         application-id?,
                                         preparer-id?,
                                         publisher-id?)>

<!ELEMENT volume-id                     (#PCDATA)>
<!ELEMENT system-id                     (#PCDATA)>
<!ELEMENT application-id                (#PCDATA)>
<!ELEMENT preparer-id                   (#PCDATA)>
<!ELEMENT publisher-id                  (#PCDATA)>
@end cartouche
@end example

This part of the XML structure describes the primary volume descriptor
of the disc.

@table @code
@item <volume-id>
Volume label of the @acronym{CD-ROM}. Content restricted to up to 32
d-characters, @xref{ISO646 d-Characters}. This is label usually shows up
on computer systems as volume label.

@item <system-id>
System id of the @acronym{CD-ROM}. Content restricted to up to 32
a-characters. Should be set to @samp{CD-RTOS CD-BRIDGE} for Video CD's
for @acronym{CD-i} compatibility.  This fields content is ignored by
vcdimager and always set to @samp{CD-RTOS CD-BRIDGE}.

@item <application-id>
Defines the application pathname for @acronym{CD-i} playing devices.

@item <preparer-id>
This field is used by vcdimager to put a version string on the Video CD,
regardless of the content given in the XML description which is ignored.

@item <publisher-id>
Data Preparer Identifier for the @acronym{CD-ROM}. Content restricted to
up to 128 a-characters@xref{ISO646 a-Characters}.
@end table

@smallexample
@cartouche
@dots{}
  <pvd>
    <volume-id>GNU_WARS_EP9_1_OF_2</volume-id>
    <system-id>CD-RTOS CD-BRIDGE</system-id>
    <publisher-id>John Doe</publisher-id>
  </pvd>
@dots{}
@end cartouche
@end smallexample

@node <filesystem> Container, <segment-items> Container, <pvd> Container, <videocd> Root
@subsection @code{<filesystem>} Container
@tgindex @code{filesystem}

@menu
* <folder> Element/Container::  
* <file> Element/Container::    
@end menu

@example
@cartouche
<!ELEMENT filesystem                    (folder*,
                                         file*)>
@end cartouche
@end example

This section of the @acronym{XML} description allows for the creation of
additional folders and files into the ISO-9660 filesystem on the Video
CD. @xref{Adding Files to the Video CD}.

@node <folder> Element/Container, <file> Element/Container, <filesystem> Container, <filesystem> Container
@subsubsection @code{<folder>} Element/Container
@tgindex @code{folder}
@tgindex @code{name}

@example
@cartouche
<!ELEMENT folder                        (name,
                                         folder*,
                                         file*)>

<!ELEMENT name                          (#PCDATA)>
@end cartouche
@end example

@table @code
@item <name>
Directory name in the ISO-9660 domain. 
@end table

@smallexample
@cartouche
@dots{}
  <filesystem>
    <folder>
      <name>CDI</name>
      <file src=@dots{}>
@dots{}
    </folder>
  </filesystem>
@dots{}
@end cartouche
@end smallexample

@node <file> Element/Container,  , <folder> Element/Container, <filesystem> Container
@subsubsection @code{<file>} Element
@tgindex @code{file}
@tgindex @code{name}

@example
@cartouche
<!ELEMENT file                          (name)>
<!ATTLIST file 
  src          %URI;  #REQUIRED
  format       (form1|mixed) "form1"
>
<!ELEMENT name                          (#PCDATA)>
@end cartouche
@end example

@table @code
@item <name>
Filename in the ISO-9660 domain. 

@item src
@tgindex @var{src}
Source location of the file.

@item format
@tgindex @var{format}
Whether file is an ordinary @code{form1} file, or a @code{mixed} form
real-time file containing the sector information in 2336 byte blocks.

@end table

@smallexample
@cartouche
@dots{}
    <folder>
      <name>CDI</name>
      <file src="/usr/share/cdi/cdi_imag.rtf" format="mixed">
        <name>CDI_IMAG.RTF</name>
      </file>
      <file src="/usr/share/cdi/cdi_text.fnt">
        <name>CDI_TEXT.FNT</name>
      </file>
@dots{}
@end cartouche
@end smallexample

@node <segment-items> Container, <sequence-items> Container, <filesystem> Container, <videocd> Root
@subsection @code{<segment-items>} Container
@tgindex @code{segment-items}

@menu
* <segment-item> Element::      
@end menu

@example
@cartouche
<!ELEMENT segment-items                 (segment-item)+>
@end cartouche
@end example

Only supported for Video CD 2.0, Super Video CD 1.0 and HQ Video CD 1.0.

@node <segment-item> Element,  , <segment-items> Container, <segment-items> Container
@subsubsection @code{<segment-item>} Element
@tgindex @code{segment-item}

@example
@cartouche
<!ELEMENT segment-item                  (auto-pause)*>
<!ATTLIST segment-item 
  id           ID     #REQUIRED
  src          %URI;  #REQUIRED
>

<!ELEMENT auto-pause                    (#PCDATA)>
@end cartouche
@end example

@table @code
@item <segment-item>
Element representing a segment item. Segment play items need to be
referenced from the @command{<pbc>} section in order to be accessible at
all.

@item id
Id string to be referenced in @code{ref} attributes.

@item src
This attribute specifies the external file name of the item, i.e. the
location of the file containing the @acronym{MPEG} stream to be
included.

@item <auto-pause>
See description in @code{<sequence-item>}.

@end table

@smallexample
@cartouche
@dots{}
  <segment-items>
@dots{}
    <segment-item src="stills/splash.mpg" id="seg-still-splash" />

    <segment-item src="animations/intro.mpg" id="seg-animation-intro" />

    <segment-item src="animations/intra.mpg" id="seg-animation-intra" />

    <segment-item src="animations/extro.mpg" id="seg-animation-extro" />
@dots{}
  <segment-items>
@dots{}
@end cartouche
@end smallexample

@node <sequence-items> Container, <pbc> Container, <segment-items> Container, <videocd> Root
@subsection @code{<sequence-items>} Container
@tgindex @code{sequence-items}

@menu
* <sequence-item> Element::     
@end menu

@example
@cartouche
<!ELEMENT sequence-items                (sequence-item)+>
@end cartouche
@end example

@node <sequence-item> Element,  , <sequence-items> Container, <sequence-items> Container
@subsubsection @code{<sequence-item>} Element
@tgindex @code{sequence-item}
@tgindex @code{auto-pause}
@tgindex @code{default-entry}
@tgindex @code{entry}
@cindex Entry points

@example
@cartouche
<!ELEMENT sequence-item                 (default-entry?,
                                         entry*,
                                         auto-pause*)>
<!ATTLIST sequence-item
  id           ID     #IMPLIED
  src          %URI;  #REQUIRED
>

<!ELEMENT auto-pause                    (#PCDATA)>

<!ELEMENT default-entry EMPTY>
<!ATTLIST default-entry
  id           ID     #REQUIRED
>

<!ELEMENT entry                         (#PCDATA)>
<!ATTLIST entry
  id           ID     #IMPLIED
>
@end cartouche
@end example

@table @code
@item <sequence-item>
Element representing a sequence item. Each sequence item corresponds to
a single track in the resulting disc.

@item id
ID value referenced in @code{ref} attributes.

@item src
This attribute specifies the external file name of the item,
i.e. @acronym{MPEG} stream, to be included.

@item <auto-pause>
This element specifies where to insert auto pause points, whose wait
time is controlled by play lists' @code{<autowait>}. The time is given
in seconds from the beginning of the sequence.

@item <default-entry>
Represents the mandatory default entry point pointing to the start of
the sequence@footnote{Referencing the default entry point id should
be equivalent to referencing the sequence id. Depending on the firmware
of the playing device, the sequence id may reflect the start of the
sequence as defined by the TOC, while the default entry id gets defined
by the address defined in the @file{ENTRY.VCD} or @file{ENTRY.SVD}}.

@item <entry>
Defines an additional entry point into the sequence item. Up to 99
entry points (including the default entry point) can be defined per
sequence, while only a maximum of 500 entry points@footnote{every
sequence point has automatically an entry point defined, which must be
subtracted from the maximum of 500 entry points} can be present in the
whole disc. The entry point time is given in seconds from the
beginning of the sequence.  If referenced from @acronym{PBC} the
sequence which contains the entry point is played from the entry point
to the end of the sequence, @emph{not} to the next entry point!
Similarly navigation values do not change if the next entry point is
passed. @xref{Access Point Sectors}.

@item id
Play item ID value referenced in @code{ref} attributes. 

@end table

@smallexample
@cartouche
@dots{}
  <sequence-items>
@dots{}
    <sequence-item src="videos/movie.mpg" id="seq-movie">
      <default-entry id="ent-movie-0" />
      <entry id="ent-movie-1">90.32</entry>
      <entry id="ent-movie-2">710</entry>
      <entry id="ent-movie-3">1760.5</entry>
      <entry id="ent-movie-4">3050</entry>
    </sequence-item>

    <sequence-item src="videos/trailer1.mpg" id="seq-trailer-1" />

    <sequence-item src="videos/trailer2.mpg" id="seq-trailer-2">
      <auto-pause>15.300</auto-pause>
      <auto-pause>260.7</auto-pause>
    </sequence-item>
@dots{}
  <sequence-items>
@dots{}
@end cartouche
@end smallexample

@node <pbc> Container,  , <sequence-items> Container, <videocd> Root
@subsection @code{<pbc>} Container
@tgindex @code{pbc}
@tgindex @code{play-item}

@menu
* <selection> Element::         
* <playlist> Element::          
* <endlist> Element::           
@end menu

@example
@cartouche
<!ELEMENT pbc                           (selection|
                                         playlist|
                                         endlist)+>

<!ENTITY % pbcattrs
" id           ID     #REQUIRED
  rejected     (true|false) 'false'"
>

<!ENTITY % XY "CDATA">

<!ENTITY % ofsattrs
" ref          IDREF  #REQUIRED
  x1           %XY;   #IMPLIED
  y1           %XY;   #IMPLIED
  x2           %XY;   #IMPLIED
  y2           %XY;   #IMPLIED"
>

<!ELEMENT play-item                      EMPTY>
<!ATTLIST play-item
  ref          IDREF  #IMPLIED
>
@end cartouche
@end example

@code{<pbc>} container and sub-elements only supported for Video CD 2.0,
Super Video CD 1.0 and HQ Video CD 1.0.

@table @code
@item id
ID value referenced in @code{ref} attributes.

@item rejected
@cindex Rejected list
@tgindex @var{rejected}
Attribute controlling, whether item is not listed, i.e. @emph{rejected},
in the @acronym{LOT}. Lists which are not rejected may be---if supported
by the playing device---select-able by user input of the automatically
assigned @emph{List ID Number}. It is recommended to enable the rejected
property for but the very first PBC list, in order to make the
@emph{unreferenced item check} work better.  The first PBC Item must not
be rejected.

@item x1 y1 x2 y2
@cindex Hot-spot area coordinates
@tgindex @var{x1}
@tgindex @var{x2}
@tgindex @var{y1}
@tgindex @var{y2}
Screen coordinates for selection-hotspot areas. This is only supported
for @code{<selection>} members; @samp{0,0} is the upper left left
screen coordinate and @samp{255,255} is the lower-right screen
coordinate.  @code{x1} and @code{y1} are required to be less than
@code{x2} and @code{y2} respectively. This coordinate system is
independent and does not vary due to actual screen resolution or
aspect ratio that may be use in display.

@xref{Selection List}.

@item play-item
@cindex Play nothing item
@tgindex @code{play-item}
This empty element is used to reference play item ids. If the @code{ref}
attribute is ommitted (e.g. @code{<play-item />}, the @emph{play nothing
item} is implicitly referenced.

@end table

@node <selection> Element, <playlist> Element, <pbc> Container, <pbc> Container
@subsubsection @code{<selection>} Element
@tgindex @code{selection}
@tgindex @code{bsn}
@tgindex @code{next}
@tgindex @code{prev}
@tgindex @code{return}
@tgindex @code{multi-default}
@tgindex @code{default}
@tgindex @code{timeout}
@tgindex @code{wait}
@tgindex @code{loop}
@tgindex @code{play-item}
@tgindex @code{select}
@cindex Random selection on timeout
@cindex Menus

@example
@cartouche
<!ELEMENT selection                     (bsn?,
                                         prev?,
                                         next?,
                                         return?,
                                         (multi-default|default)?,
                                         timeout?,
                                         wait?,
                                         loop?,
                                         play-item?,
                                         select*)>
<!ATTLIST selection
  %pbcattrs;
>

<!ENTITY % ofsattrs
 ref       IDREF       #IMPLIED
 x1        %XY;        #IMPLIED
 y1        %XY;        #IMPLIED
 x2        %XY;        #IMPLIED
 y2        %XY;        #IMPLIED
>

<!ELEMENT      bsn                      (#PCDATA)>
<!ELEMENT      prev                     EMPTY>
<!ELEMENT      next                     EMPTY>
<!ELEMENT      return                   EMPTY>

<!ELEMENT      default                  EMPTY>
<!ELEMENT      multi-default            EMPTY>
<!ATTLIST multi-default
  numeric      (enabled|disabled)  'enabled'
>

<!ELEMENT      timeout                  EMPTY>
<!ELEMENT      wait                     (#PCDATA)>

<!ELEMENT      loop                     (#PCDATA)>
<!ATTLIST loop
  jump-timing  (immediate|delayed) 'immediate'
>

<!ATTLIST prev      %ofsattrs>
<!ATTLIST next      %ofsattrs>
<!ATTLIST return    %ofsattrs>
<!ATTLIST default   %ofsattrs>
<!ATTLIST select    %ofsattrs>
<!ATTLIST timeout   ref       IDREF     #IMPLIED>
<!ATTLIST play-item ref       IDREF     #IMPLIED>

<!ELEMENT      play-item                EMPTY>
<!ELEMENT      select                   EMPTY>
@end cartouche
@end example

@table @code
@item <bsn>
Base selection number, the numeric value which is taken as the first
selection number. The default is @samp{1} and the allowed range goes
from 1 upto 99.

@item <prev>
Target list id jumped to on @key{PREVIOUS} key press.

@item <next>
Target list id jumped to on @key{NEXT} key press.

@item <return>
Target list id jumped to on @key{RETURN} key press.

@item <default>
Target list id jumped to on @key{DEFAULT} key press. May not be present
at the same time with the following element. 

If a @code{<default>} target is defined, @code{<loop>} should not be set
to loop forever (@samp{0}) nor shall @code{<wait>} indicate an infinite
time-out wait time, otherwise the target will be unreachable.

@item <multi-default>
@tgindex @var{numeric}
When present, causes the selection list to be a multi-default selection
list, i.e. that the target list id of the @key{DEFAULT} depends on which
part of the sequence item is playing. The @code{numeric} attributes, if
@emph{disabled}, allows to disable the @key{NUMERIC} keys. When using
multi-default selections, the @code{<bsn>} must be set to 1 and the
number of selection must match the number of all entry points of the
sequence referenced by @code{<play-item>}.

@item <timeout>
Target list id to be jumped on time-out of @code{<wait>}. If omitted
(and @code{<wait>} is not set to an infinite time) one of the
@code{<select>} targets is selected at random!

@item <wait>
Time in seconds to wait after playback of @code{<play-item>} before
triggering the @code{<timeout>} action (unless the user triggers some
action before time ran up). Default: @samp{0}.

@item <loop>
@tgindex @var{jump-timing}
Times to repeat the playback of @code{<play-item>}. the
@code{jump-timing} attribute controls whether the playback of
@code{<play-item>} is finished, thus @emph{delayed}, before executing
user triggered action or an @emph{immediate} jump is performed. After the
specified amount of repetitions are completed, the @code{<wait>} time
begins to count down, unless set to an infinite wait time by setting it
to the value @samp{0}. If this element is omitted, a default of @samp{1}
is used, i.e. the @code{<play-item>} will be displayed once. The default
for the @code{jump-timing} is @var{immediate}.

When the @code{jump-timing} is set to @emph{delayed}, it is recommended
that the length of the referenced @code{<play-item>} is not more than 5
seconds. The recommended setting for a play item consisting of one still
picture and no audio is to loop once and have a @emph{delayed}
@code{jump-timing}.

If @code{<play-time>} refers to an entry, the unit of looping is
complete when the sequence that the entry is contained in is
complete. The point to start again on repetition is still however the
entry point, not the beginning of the sequence.

@item <play-item>
The @emph{play item} to be played while waiting for user intervention.

@item <select>
Target list id(s) jumped to on @key{NUMERIC} key presses. There may be
up to 99 select choices. The sum of @code{<bsn>} and the number of
@code{<select>} elements per @code{<selection>} must not be greater than
100.

@end table

@node <playlist> Element, <endlist> Element, <selection> Element, <pbc> Container
@subsubsection @code{<playlist>} Element
@tgindex @code{playlist}
@tgindex @code{next}
@tgindex @code{prev}
@tgindex @code{return}
@tgindex @code{playtime}
@tgindex @code{wait}
@tgindex @code{autowait}
@tgindex @code{play-item}

@example
@cartouche
<!ELEMENT playlist                      (prev?,
                                         next?,
                                         return?,
                                         playtime?,
                                         wait?,
                                         autowait?,
                                         play-item+)>
<!ATTLIST playlist
  %pbcattrs;
>

<!ELEMENT      prev                     EMPTY>
<!ELEMENT      next                     EMPTY>
<!ELEMENT      return                   EMPTY>
<!ELEMENT      playtime                 (#PCDATA)>
<!ELEMENT      wait                     (#PCDATA)>
<!ELEMENT      autowait                 (#PCDATA)>
<!ELEMENT      play-item                EMPTY>
@end cartouche
@end example

@table @code

@item <prev>
Target list id jumped to on @key{PREVIOUS} key press.

@item <next>
Target list id jumped to on @key{NEXT} key press.

@item <return>
Target list id jumped to on @key{RETURN} key press.

@item <playtime>
The amount of seconds to play of every @code{<play-item>}. The given
time value is rounded to 1/15 second units. The allowed range has a
maximum value of @samp{4369.0} seconds, values equal or less than
@samp{0} cause each @code{<play-item>} to be played to its end.
Default: @samp{0}

@item <wait>
Time in seconds to wait after each playback of @code{<play-item>} before
proceding. Default: @samp{0}.

@item <autowait>
Time in seconds to wait at each defined @code{<auto-pause>} point for
sequence items referenced in this play list. Default: @samp{0}.

@item <play-item>
The @emph{play item(s)} to play in order. Up to 255 @code{<play-item>}
elements may be defined per @code{<playlist>}.

@end table

@smallexample
@cartouche
@dots{}
  <pbc>
@dots{}
    <playlist id="play-trailers">
      <prev ref="select-specialfeaturemenu"/>
      <next ref="select-specialfeaturemenu"/>
      <return ref="select-specialfeaturemenu"/>
      <wait>0</wait>
      <autowait>0</autowait>
      <play-item ref="seg-animation-intro"/>
      <play-item ref="seq-trailer-1"/>
      <play-item ref="seg-animation-intra"/>
      <play-item ref="seq-trailer-2"/>
      <play-item ref="seg-animation-intra"/>
      <play-item ref="seq-trailer-3"/>
      <play-item ref="seg-animation-extro"/>
    </playlist>
@dots{}
  </pbc>
</videocd>
@dots{}
@end cartouche
@end smallexample


@node <endlist> Element,  , <playlist> Element, <pbc> Container
@subsubsection @code{<endlist>} Element
@tgindex @code{endlist}
@tgindex @code{next-volume}
@tgindex @code{play-item}

@example
@cartouche
<!ELEMENT endlist                       (next-volume?,
                                         play-item?)>
<!ATTLIST endlist
  %pbcattrs;
>

<!ELEMENT next-volume                   (#PCDATA)>
@end cartouche
@end example

@noindent
The following elements are only supported for Super Video CD 1.0 and HQ
Video CD 1.0.

@table @code
@item <next-volume>
Only supported for Super Video CD's. If set to @emph{0} stop
@acronym{PBC} intepretation, otherwise switch to the selected volume
number.

@item <play-item>
Only supported for Super Video CD's. Displays the referenced image while
waiting for a volume change. Referenced play item shall be a still
picture.
@end table

@smallexample
@cartouche
@dots{}
    <endlist id="end-lid">
      <next-volume>2</next-volume>
      <play-item ref="change-disc-segitem"/>
    </endlist>
@dots{}
  </pbc>
</videocd>
@dots{}
@end cartouche
@end smallexample

@node Examples, Tips and Hints, Video CD XML Description, Top
@chapter Examples
@cindex @command{cdrdao}, How to use

The general procedure for creating a (Super) Video CD involves the
following steps:

@enumerate
@item 
Get an idea for a Video CD.

@item
Collecting, creating or encoding the required @acronym{MPEG} items for
inclusion on the Video CD.

@item
Design some sophisticated @acronym{PBC} flow and create a @acronym{XML}
description reflecting that or use @command{vcdxgen} to generate a very
simple Video CD structure.

@item
Let @command{vcdxbuild} process the @acronym{XML} description created in
the previous step. If required fix warnings and errors displayed by
@command{vcdxbuild}.

@item
Write the created disc image to a @acronym{CD-R}.

@end enumerate

The steps of encoding compliant @acronym{MPEG} program streams are not
covered in this manual.@footnote{see @uref{http://mjpeg.sourceforge.net/}}

The last step, writing to a @acronym{CD-R}, can be accomplished by
@command{cdrdao}@footnote{see @uref{http://cdrdao.sourceforge.net/}} as
simple as:

@example
@cartouche
$ cdrdao write --device 0,5,0 --speed 8 videocd.cue 
Cdrdao version 1.1.5 - (C) Andreas Mueller <andreas@@daneb.de>
  SCSI interface library - (C) Joerg Schilling
  L-EC encoding library - (C) Heiko Eissfeldt
  Paranoia DAE library - (C) Monty

Check http://cdrdao.sourceforge.net/drives.html#dt for current driver 
tables.

Using libscg version 'schily-0.5'

0,5,0: YAMAHA CRW8424S	Rev: 1.0j
Using driver: Generic SCSI-3/MMC - Version 1.2 (options 0x0000)

Starting write at speed 8...
Pausing 10 seconds - hit CTRL-C to abort.
Process can be aborted with QUIT signal (usually CTRL-\).
Executing power calibration...
Power calibration successful.
Writing track 01 (mode MODE2_RAW/MODE2_RAW)...
Writing track 02 (mode MODE2_RAW/MODE2_RAW)...
Wrote 750 of 750 MB (Buffer 100%).
Wrote 334544 blocks. Buffer fill min 96%/max 100%.
Flushing cache...
Writing finished successfully.
$
@end cartouche
@end example

@menu
* Simple Multitrack Example::   
* Video CD Disassembling::      
* Video CD Low-level Information::      
@end menu

@node Simple Multitrack Example, Video CD Disassembling, Examples, Examples
@section Simple Multitrack Example

In the following example session, the files @file{track1.mpg},
@file{track2.mpg} and @file{track3.mpg} are mastered into the default
output files @file{videocd.cue} and @file{videocd.bin}. The volume label
is set to `My Test VCD'.

@example
@cartouche
$ vcdimager --iso-volume-label="MY_TEST_VCD" track1.mpg track2 track3.mpg 
   INFO: scanning mpeg sequence item #0 for scanpoints...
   INFO: scanning mpeg sequence item #1 for scanpoints...
   INFO: scanning mpeg sequence item #2 for scanpoints...
   INFO: writing track 1 (ISO-9660)...
   INFO: writing track 2, MPEG1, NTSC SIF (352x240/29.97fps), 1 audio stream...
   INFO: writing track 3, MPEG1, PAL SIF (352x288/25fps), 1 audio stream...
   INFO: writing track 4, MPEG1, NTSC SIF (352x240/29.97fps), 1 audio stream...
finished ok, image created with 13626 sectors [03:01.51]
$
@end cartouche
@end example

The same with @acronym{XML} based tools:

@example
@cartouche
$ vcdxgen --iso-volume-label="MY_TEST_VCD" track1.mpg track2 track3.mpg 
(Super) VideoCD xml description created successfully as `videocd.xml'
$ vcdxbuild videocd.xml
   INFO: scanning mpeg sequence item #0 for scanpoints...
   INFO: scanning mpeg sequence item #1 for scanpoints...
   INFO: scanning mpeg sequence item #2 for scanpoints...
   INFO: writing track 1 (ISO-9660)...
   INFO: writing track 2, MPEG1, NTSC SIF (352x240/29.97fps), 1 audio stream...
   INFO: writing track 3, MPEG1, PAL SIF (352x288/25fps), 1 audio stream...
   INFO: writing track 4, MPEG1, MPEG1, NTSC SIF (352x240/29.97fps), 1 audio stream...
finished ok, image created with 13626 sectors [03:01.51]
$
@end cartouche
@end example

@node Video CD Disassembling, Video CD Low-level Information, Simple Multitrack Example, Examples
@section Video CD Disassembling

The next example show how to extract the @acronym{PBC} information and
the @acronym{MPEG} streams contained in the image file
@file{videocd.bin} (the resulting streams are stored in files named
@file{avseq##.mpg} with @samp{##} being the track number, starting with
0).

@example
@cartouche
$ vcdxrip -c videocd.cue
   INFO: detected extended VCD2.0 PBC files
   INFO: extracting avseq00.mpg... (start lsn 450 (+4739))
   INFO: extracting avseq01.mpg... (start lsn 5189 (+4160))
   INFO: extracting avseq02.mpg... (start lsn 9349 (+4277))
   INFO: writing xml description to `videocd.xml'...
   INFO: done
$
@end cartouche
@end example

@node Video CD Low-level Information,  , Video CD Disassembling, Examples
@section Video CD Low-level Information

The last example shows how to get lower-level layout information about
a VCD using @command{vcd-info}. For more information see @xref{Top, , Introduction, vcd-info, The GNU Video CD Info Dump Program}.

@example
@cartouche
$ vcd-info -c videocd.cue
vcd-info - GNU VCDImager - (Super) Video CD Report
$Id: vcdimager.texi,v 1.45 2005/06/18 04:11:08 rocky Exp $

Source: image file `svcd_ogt_test_ntsc.cue'
Image size: 4106 sectors
SVCD detected
-------------------------------------------------------------------------------
ISO9660 primary volume descriptor
 ID: `CD001'
 version: 1
 system id: `CD-RTOS CD-BRIDGE'
 volume id: `SVCD_OGT_TEST_NTSC'
 volumeset id: `'
 publisher id: `'
 preparer id: `GNU VCDIMAGER 0.7.12 LINUX-GNU/I386'
 application id: `'
 ISO size: 376 blocks (logical blocksize: 2048 bytes)
 XA marker present: yes
-------------------------------------------------------------------------------
ISO9660 filesystem dump
 root directory in PVD set to LSN 18

 /:
  d d---1xrxrxr 0 0 [fn 00] [LSN     18]      2048  .
  d d---1xrxrxr 0 0 [fn 00] [LSN     18]      2048  ..
  d d---1xrxrxr 0 0 [fn 00] [LSN     19]      2048  EXT
  d d---1xrxrxr 0 0 [fn 00] [LSN     20]      2048  MPEG2
  d d---1xrxrxr 0 0 [fn 00] [LSN     21]      2048  SEGMENT
  d d---1xrxrxr 0 0 [fn 00] [LSN     22]      2048  SVCD

 /EXT/:
  d d---1xrxrxr 0 0 [fn 00] [LSN     19]      2048  .
  d d---1xrxrxr 0 0 [fn 00] [LSN     18]      2048  ..
  - ----1xrxrxr 0 0 [fn 00] [LSN    375]       201  SCANDATA.DAT;1

 /MPEG2/:
  d d---1xrxrxr 0 0 [fn 00] [LSN     20]      2048  .
  d d---1xrxrxr 0 0 [fn 00] [LSN     18]      2048  ..
  - ---2-xrxrxr 0 0 [fn 00] [LSN    526]   7971320 (  7024640)  AVSEQ01.MPG;1

 /SEGMENT/:
  d d---1xrxrxr 0 0 [fn 00] [LSN     21]      2048  .
  d d---1xrxrxr 0 0 [fn 00] [LSN     18]      2048  ..
  - ---2-xrxrxr 0 0 [fn 00] [LSN    225]    183596 (   161792)  ITEM0001.MPG;1

 /SVCD/:
  d d---1xrxrxr 0 0 [fn 00] [LSN     22]      2048  .
  d d---1xrxrxr 0 0 [fn 00] [LSN     18]      2048  ..
  - ----1xrxrxr 0 0 [fn 00] [LSN    151]      2048  ENTRIES.SVD;1
  - ----1xrxrxr 0 0 [fn 00] [LSN    150]      2048  INFO.SVD;1
  - ----1xrxrxr 0 0 [fn 00] [LSN    152]     65536  LOT.SVD;1
  - ----1xrxrxr 0 0 [fn 00] [LSN    184]        40  PSD.SVD;1
  - ----1xrxrxr 0 0 [fn 00] [LSN    186]       190  SEARCH.DAT;1
  - ----1xrxrxr 0 0 [fn 00] [LSN    185]      2048  TRACKS.SVD;1

-------------------------------------------------------------------------------
SVCD/INFO.SVD
 ID: `SUPERVCD'
 version: 0x01
 system profile tag: 0x00
 album id: `OGT_TEST_NTSC'
 volume count: 1
 volume number: 1
 pal flags: 00000000 00000000 00000000 00000000 00000000 00000000
  (bslbf)   00000000 00000000 00000000 00000000 00000000 00000000 00
 flags:
  reserved1: no
  restriction: 0
  special info: no
  user data cc: no
  start lid #2: no
  start track #2: no
  reserved2: no
 psd size: 40
 first segment addr: 00:05:00
 offset multiplier: 0x08
 maximum lid: 3
 number of segments: 1
 SEGMENT[0000]: track# 0, LSN    225 (MSF 00:05:00), 79 sectors
   audio: no stream, video: NTSC still, continuation no, OGT substream: None
 volume start time[0]: 0 secs
 volume start time[1]: 0 secs
 volume start time[2]: 0 secs
 volume start time[3]: 0 secs
 volume start time[4]: 0 secs
-------------------------------------------------------------------------------
SVCD/ENTRIES.SVD
 ID: `ENTRYVCD'
 version: 0x01
 system profile tag: 0x00
 entries: 1
 ENTRY[00]: track#  1 (SEQUENCE[0]), LSN    526 (MSF 00:09:01)
-------------------------------------------------------------------------------
SVCD/LOT.SVD
 LID[1]: offset = 0 (0x0000)
 LID[2]: offset = 16 (0x0002)
 LID[3]: rejected
-------------------------------------------------------------------------------
SVCD/PSD.SVD
 PSD[00] (LID[1] @@0x0000): play list descriptor
  NOI: 1 | LID#: 1 (rejected: no)
  prev: LID[2] @@0x0002 | next: LID[2] @@0x0002 | return: LID[3] @@0x0004
  playtime: 0/15s | wait: 1s | autowait: 0s
  play-item[0]: SEQUENCE[1] (0x0002)

 PSD[01] (LID[2] @@0x0002): play list descriptor
  NOI: 1 | LID#: 2 (rejected: no)
  prev: LID[1] @@0x0000 | next: LID[1] @@0x0000 | return: LID[3] @@0x0004
  playtime: 0/15s | wait: 6s | autowait: 0s
  play-item[0]: SEGMENT[0] (0x03e8)

 PSD[02] (LID[3] @@0x0004): end list descriptor
  next disc number: 0 (if 0 stop PBC handling)
  change picture item: play nothing (0x0000)

-------------------------------------------------------------------------------
SVCD/TRACKS.SVD
 ID: `TRACKSVD'
 version: 0x01
 tracks: 1
 track[00]: 00:29:11, audio: 1 stream, video: NTSC stream, OGT stream: 0 available

CVD interpretation (probably)
(track[00]: 00:29:11 (cumulated), audio: 00, ogt: 4d)
-------------------------------------------------------------------------------
CD-ROM TRACKS (1 - 2)
  #: MSF       LSN     Type
  1: 00:02:00  000000  XA
  2: 00:09:01  000526  XA
170: 00:56:56  004106  leadout
-------------------------------------------------------------------------------
SVCD/SEARCH.DAT
 ID: `SEARCHSV'
 version: 0x01
 scanpoints: 59
 scaninterval: 1 (in 0.5sec units -- must be `1')
 scanpoint[0000]: (real time: 00:00:00.0)  sector: LSN 527 (MSF 00:09:02)
 scanpoint[0001]: (real time: 00:00:00.5)  sector: LSN 596 (MSF 00:09:71)
 scanpoint[0002]: (real time: 00:00:01.0)  sector: LSN 596 (MSF 00:09:71)
 scanpoint[0003]: (real time: 00:00:01.5)  sector: LSN 671 (MSF 00:10:71)
 scanpoint[0004]: (real time: 00:00:02.0)  sector: LSN 737 (MSF 00:11:62)
 scanpoint[0005]: (real time: 00:00:02.5)  sector: LSN 808 (MSF 00:12:58)
 scanpoint[0006]: (real time: 00:00:03.0)  sector: LSN 877 (MSF 00:13:52)
 scanpoint[0007]: (real time: 00:00:03.5)  sector: LSN 877 (MSF 00:13:52)
 scanpoint[0008]: (real time: 00:00:04.0)  sector: LSN 944 (MSF 00:14:44)
 scanpoint[0009]: (real time: 00:00:04.5)  sector: LSN 1012 (MSF 00:15:37)
 scanpoint[0010]: (real time: 00:00:05.0)  sector: LSN 1106 (MSF 00:16:56)
 scanpoint[0011]: (real time: 00:00:05.5)  sector: LSN 1183 (MSF 00:17:58)
 scanpoint[0012]: (real time: 00:00:06.0)  sector: LSN 1183 (MSF 00:17:58)
 scanpoint[0013]: (real time: 00:00:06.5)  sector: LSN 1257 (MSF 00:18:57)
 scanpoint[0014]: (real time: 00:00:07.0)  sector: LSN 1333 (MSF 00:19:58)
 scanpoint[0015]: (real time: 00:00:07.5)  sector: LSN 1408 (MSF 00:20:58)
 [..skipping...]
 scanpoint[0044]: (real time: 00:00:22.0)  sector: LSN 3097 (MSF 00:43:22)
 scanpoint[0045]: (real time: 00:00:22.5)  sector: LSN 3173 (MSF 00:44:23)
 scanpoint[0046]: (real time: 00:00:23.0)  sector: LSN 3246 (MSF 00:45:21)
 scanpoint[0047]: (real time: 00:00:23.5)  sector: LSN 3246 (MSF 00:45:21)
 scanpoint[0048]: (real time: 00:00:24.0)  sector: LSN 3321 (MSF 00:46:21)
 scanpoint[0049]: (real time: 00:00:24.5)  sector: LSN 3387 (MSF 00:47:12)
 scanpoint[0050]: (real time: 00:00:25.0)  sector: LSN 3455 (MSF 00:48:05)
 scanpoint[0051]: (real time: 00:00:25.5)  sector: LSN 3519 (MSF 00:48:69)
 scanpoint[0052]: (real time: 00:00:26.0)  sector: LSN 3519 (MSF 00:48:69)
 scanpoint[0053]: (real time: 00:00:26.5)  sector: LSN 3584 (MSF 00:49:59)
 scanpoint[0054]: (real time: 00:00:27.0)  sector: LSN 3654 (MSF 00:50:54)
 scanpoint[0055]: (real time: 00:00:27.5)  sector: LSN 3727 (MSF 00:51:52)
 scanpoint[0056]: (real time: 00:00:28.0)  sector: LSN 3801 (MSF 00:52:51)
 scanpoint[0057]: (real time: 00:00:28.5)  sector: LSN 3801 (MSF 00:52:51)
 scanpoint[0058]: (real time: 00:00:29.0)  sector: LSN 3874 (MSF 00:53:49)
-------------------------------------------------------------------------------
EXT/SCANDATA.DAT
 ID: `SCAN_VCD'
 version: 0x01
 reserved: 0x00
 scandata_count: 59
 sequence_count: 1
 segment_count: 0
  cumulative_playingtime[0]: 00:29:11
 sequence scandata ofs: 3
  track [0]: TOC num: 2, sd offset: 3
 (scanpoint[0] offset = 3)
  scanpoint[0000] (ofs:    3): LSN 527 (MSF 00:09:02)
  scanpoint[0001] (ofs:    6): LSN 596 (MSF 00:09:71)
  scanpoint[0002] (ofs:    9): LSN 596 (MSF 00:09:71)
  scanpoint[0003] (ofs:   12): LSN 671 (MSF 00:10:71)
  scanpoint[0004] (ofs:   15): LSN 737 (MSF 00:11:62)
  scanpoint[0005] (ofs:   18): LSN 808 (MSF 00:12:58)
  scanpoint[0006] (ofs:   21): LSN 877 (MSF 00:13:52)
  scanpoint[0007] (ofs:   24): LSN 877 (MSF 00:13:52)
  scanpoint[0008] (ofs:   27): LSN 944 (MSF 00:14:44)
  scanpoint[0009] (ofs:   30): LSN 1012 (MSF 00:15:37)
  scanpoint[0010] (ofs:   33): LSN 1106 (MSF 00:16:56)
  scanpoint[0011] (ofs:   36): LSN 1183 (MSF 00:17:58)
  scanpoint[0012] (ofs:   39): LSN 1183 (MSF 00:17:58)
  scanpoint[0013] (ofs:   42): LSN 1257 (MSF 00:18:57)
  scanpoint[0014] (ofs:   45): LSN 1333 (MSF 00:19:58)
  scanpoint[0015] (ofs:   48): LSN 1408 (MSF 00:20:58)
 [..skipping...]
  scanpoint[0044] (ofs:  135): LSN 3097 (MSF 00:43:22)
  scanpoint[0045] (ofs:  138): LSN 3173 (MSF 00:44:23)
  scanpoint[0046] (ofs:  141): LSN 3246 (MSF 00:45:21)
  scanpoint[0047] (ofs:  144): LSN 3246 (MSF 00:45:21)
  scanpoint[0048] (ofs:  147): LSN 3321 (MSF 00:46:21)
  scanpoint[0049] (ofs:  150): LSN 3387 (MSF 00:47:12)
  scanpoint[0050] (ofs:  153): LSN 3455 (MSF 00:48:05)
  scanpoint[0051] (ofs:  156): LSN 3519 (MSF 00:48:69)
  scanpoint[0052] (ofs:  159): LSN 3519 (MSF 00:48:69)
  scanpoint[0053] (ofs:  162): LSN 3584 (MSF 00:49:59)
  scanpoint[0054] (ofs:  165): LSN 3654 (MSF 00:50:54)
  scanpoint[0055] (ofs:  168): LSN 3727 (MSF 00:51:52)
  scanpoint[0056] (ofs:  171): LSN 3801 (MSF 00:52:51)
  scanpoint[0057] (ofs:  174): LSN 3801 (MSF 00:52:51)
  scanpoint[0058] (ofs:  177): LSN 3874 (MSF 00:53:49)
-------------------------------------------------------------------------------
$
@end cartouche
@end example

@node Tips and Hints, ISO 9660 Character Sets, Examples, Top
@appendix Tips and Hints

@menu
* SVCD Player Compatibility::   
* Fast Forward & Fast Rewind with Super Video CDs::  
@end menu

@node SVCD Player Compatibility, Fast Forward & Fast Rewind with Super Video CDs, Tips and Hints, Tips and Hints
@appendixsec SVCD Player Compatibility

If you have problems with your playing device failing to @emph{detect} a
created @acronym{SVCD}, you can may the following things (some of the
advices below apply to @acronym{VCD}s as well):

@enumerate
@item
Take warnings serious! If there were warnings issued during the image
building process, chances are the problems are related to them.

@item 
Make sure the @acronym{SVCD} is physically OK (e.g., analyze the disc
with @command{vcddebug} or try it on some other playing device).

@item
Try creating the @acronym{SVCD} by enabling the @samp{svcd vcd30 mpegav}
and @samp{svcd vcd30 entrysvd} options.

@item
Add an empty @file{/SEGMENT} directory, if it isn't created due to inclusion
of @acronym{SPI}s.

@item
If you have confusing time readings for discs with more than one video
track, you might need to use the @samp{svcd vcd30 tracksvd} option.

@end enumerate

@node Fast Forward & Fast Rewind with Super Video CDs,  , SVCD Player Compatibility, Tips and Hints
@appendixsec Fast Forward & Fast Rewind with Super Video CD's

Because of the @acronym{VBR} encoding of the @acronym{MPEG}-2 streams on
@acronym{SVCD}s, there's no fixed relation between sector index and
playing time. If scanning doesn't work with your playing device it can
be caused by:

@itemize @bullet
@item
The playing device does not support @acronym{FF}/@acronym{RW} with
@acronym{SVCD}s.@footnote{Sometimes upgrading the player firmware may
help.}

@item
The @acronym{MPEG}-2 streams playing time longer that can be handled by
the playing device.@footnote{Some devices don't support programs with a
playing time of over about 40 minutes. This is to be seen as bug or
limitation of the firmware, as @acronym{SVCD}'s can have programs with
up to 100 minute playing times.}

@item
The @acronym{MPEG}-2 stream does not include the mandatory scan
information data or when included, it doesn't follow the
specification@footnote{@code{libvcd} warns if scan information is
missing or syntactically wrong.}. @xref{Scan Information Data}.

@item
Some playing devices require a sequence header before each @acronym{GOP}
header. @xref{Access Point Sectors}.

@end itemize

@node ISO 9660 Character Sets, Glossary, Tips and Hints, Top
@appendix ISO 9660 Character Sets

@menu
* ISO646 d-Characters::         
* ISO646 a-Characters::         
@end menu

@node ISO646 d-Characters, ISO646 a-Characters, ISO 9660 Character Sets, ISO 9660 Character Sets
@appendixsec ISO646 d-Characters

@example
  | 0 1 2 3 4 5 6 7 
--+-----------------
0 |       0   P     
1 |       1 A Q     
2 |       2 B R     
3 |       3 C S     
4 |       4 D T     
5 |       5 E U     
6 |       6 F V     
7 |       7 G W     
8 |       8 H X     
9 |       9 I Y     
a |         J Z     
b |         K       
c |         L       
d |         M       
e |         N       
f |         O _     
@end example

@node ISO646 a-Characters,  , ISO646 d-Characters, ISO 9660 Character Sets
@appendixsec ISO646 a-Characters

@example
  | 0 1 2 3 4 5 6 7
--+-----------------
0 |       0   P                    
1 |     ! 1 A Q                    
2 |     " 2 B R                    
3 |       3 C S                    
4 |       4 D T                    
5 |     % 5 E U                    
6 |     & 6 F V                    
7 |     ' 7 G W                    
8 |     ( 8 H X                    
9 |     ) 9 I Y                    
a |     * : J Z                    
b |     + ; K                      
c |     , < L                      
d |     - = M                      
e |     . > N                      
f |     / ? O _                    
@end example

@node Glossary, GNU General Public License, ISO 9660 Character Sets, Top
@appendix Glossary

@include glossary.texi

@node GNU General Public License, GNU Free Documentation License, Glossary, Top
@appendix GNU General Public License
@cindex GPL, GNU General Public License
@center Version 2, June 1991
@include gpl.texi

@node GNU Free Documentation License, XML Tag Index, GNU General Public License, Top
@appendix GNU Free Documentation License
@cindex FDL, GNU Free Documentation License
@center Version 1.1, March 2000
@include fdl.texi

@node XML Tag Index, Concept Index, GNU Free Documentation License, Top
@unnumbered XML Tag Index

@printindex tg

@node Concept Index,  , XML Tag Index, Top
@unnumbered Concept Index

@printindex cp

@bye

to-do:
* add node structure
* grammar check
